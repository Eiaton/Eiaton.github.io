[{"title":"宿主机连接到VMWare","url":"//2024/03/11/宿主机连接到VMWare/","content":"# 参考\n\nhttps://www.p-chao.com/2020-10-06/ssh%E8%BF%9E%E6%8E%A5%E5%88%B0ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/\n","tags":["VMWare"],"categories":["VMWare"]},{"title":"translation","url":"//2023/10/11/translation/","content":"# 为读论文更方便而建\n- GA    Genetic Algorithm\n- NN    eural network-based framework\n- SVM    support vector analysis\n- CDG    Coverage-Directed test Generation\n- DUT    design under test\n- rule learning\n- constrain model\n- Probabilistic model\n\n# 目标\n1. 找到针对high-level features/patterns的ML算法以找到解决同一类verification问题（避免复杂分析）\n   1. 通常分为Test Set Redundancy Reduction\n   2. 与Test Complexity Reduction\n2. 应用ML方法来解决EDA design中的\"coverage\"问题\n\n# Test Set Redundancy Reduction具体方法列举\n## digital design\n1. Statistical model\n2. Search Methods\n3. Rule learning\n4. CNN, SVM\n5. GCN\n\n## analog/RF design\n1. KNN, ONN\n2. Regression\n\n## semiconductor\n1. CNN\n\n# Test Complexity Reduction具体方法列举\n## digital design\n1. SVM, MLP, CNN\n\n## analog/RF design\n1. ONN\n2. active learning\n\n# 论文创新点\n1. GRIP (GRaph Inference Processor)用于使GNN更low-latency\n2. ReAAP,可重构且面向算法的阵列处理器，用于加速各种深度学习工作负载\n3. GHOST,第一个基于硅光子的 GNN 加速器，可以加速各种 GNN 模型和图的推理(对于semicondector)\n4. 解决以下问题：有效处理大图/动态图表是很有挑战性的。\n    1. 明确动态和流式图处理中不同概念的含义，分析了与图数据库领域以及流和动态图算法理论的联系。\n    2. 提供图流框架的第一个分类法，识别和分析其设计中的关键维度，包括数据模型和组织、并发执行、数据分布、目标架构等\n","tags":["EDA verification"],"categories":["article","EDA verification"]},{"title":"C++ note (14)","url":"//2023/07/28/C-note-14/","content":"# STL\n## STL介绍\n- C++标准库的一部分\n- STL的称呼是历史原因导致的，目前的标准中已经没有STL字眼\n\n- 在C++20标准中，STL指的是的如下三章所定义的库：\n1. 容器库（Containers library, Chap. 26）\n2. 迭代器库（Iterators library, Chap. 27）\n3. 算法库（Algorithms library, Chap. 28）\n### STL的历史\n1993年，Alex Stepanov开发出STL的原型（Generic C++ Components）。后被C++标准委员会采纳为C++标准的一部分，采纳时的名称叫The <span style=\"color:orange\">S</span>tandard <span style=\"color:orange\">T</span>emplate <span style=\"color:orange\">L</span>ibrary\n\nreference: http://stepanovpapers.com/Stepanov-The_Standard_Template_Library-1994.pdf\n\nreference: https://www.stroustrup.com/hopl-almost-final.pdf\n\n### C++11关键字：`auto` 和 `decltype`\n### 基本概念：容器与迭代器\n## 容器\n### 顺序容器\n#### 序列式容器类型\n#### 序列式容器的构造函数\n#### 容器的构造函数：实例\n#### 访问序列式容器中的元素\n#### 迭代器\n#### 在序列式容器中插入元素\n#### 在序列式容器中删除元素\n#### 序列式容器的比较操作\n#### 序列式容器的容量操作\n#### 序列式容器的赋值和交换\n\n### 关联容器\n#### `std::pair`\n#### map的构造函数\n- 向map中插入元素\n- 在map中查找元素\n- 在map中删除元素\n#### multimap\n#### set\n\n### 适配器\n\n```cpp\n\n```\n## 迭代器\n## 算法\n","tags":["C++"],"categories":["C++","STL"]},{"title":"Use Mermaid in Hexo","url":"//2023/06/20/Use-Mermaid-in-Hexo/","content":"# Mermaid\nhttps://blog.csdn.net/wzh0709zml/article/details/103310405\n","tags":["HEXO"]},{"title":"C++ note (13)","url":"//2023/06/19/C-note-13/","content":"# 模板\n## 泛型编程\n泛型编程（generic programming）\n- 独立于任何特定数据类型的编程，这使得<span style=\"color:orange\">不同类型的数据(对象)可以被相同的代码操作</span>\n\n在 C++ 中，使用**模板**（template）来进行泛型编程，包括\n- 函数模板（Function template）\n- 类模板（Class template）\n\n当从通用代码创建实例代码时，具体数据类型才被确定\n\n泛型编程是一种编译时多态性（静态多态）。其中，数据类型本身是参数化的，因而程序具有多态性特征\n\n## 实例化\n实例化（Instantiation）：由编译器将通用模板代码转换为不同的实例代码的过程称为*实例化*\n\n## 函数模板(Function template)\n### 概念\n用相同的处理过程，处理不同类型的数据\n- 减少代码\n- 甚至能处理编程时<span style=\"color:orange\">未知的数据类型</span>\n> 已知函数，类，未知处理的数据类型，模板\n> \n> 已知基类的虚函数，未知派生类的具体实现，覆盖（多态）\n> \n> 已知函数功能，未知具体参数类型与组合，重载\n\n### 举例\n```cpp\nvoid swap(int& v1, int& v2) {\n  int tmp;\n  tmp = v1;\n  v1  = v2;\n  v2  = tmp;\n}\n```\n```cpp\nvoid swap(double& v1, double& v2) {\n  double tmp;\n  tmp = v1;\n  v1  = v2;\n  v2  = tmp;\n}\n```\n```cpp\nvoid swap(string& v1, string& v2) {\n  string tmp;\n  tmp = v1;\n  v1  = v2;\n  v2  = tmp;\n}\n```\n\n此三个函数除了所处理对象的类型不同之外，代码几乎完全相同。即，三个函数功能类似。以下函数模板可以涵盖以上三函数的作用：\n\n```cpp\ntemplate<typename T>\nvoid swap(T& v1, T& v2) {\n  T tmp;\n  tmp = v1;\n  v1  = v2;\n  v2  = tmp;\n}\n```\n> 注意：程序有些 bug。当 T 存在默认构造函数时，编译错误。\n> \n> 正确的写法： T tmp = v1； 即使用 copy 构造，来避免使用默认初始化\n\n### 一般形式\n```\ntemplate<模板形参表> 返回值类型 函数名 (形参列表) {\n  函数体\n}\n```\n\n1. 模板形参表<span style=\"color:orange\">不能为空</span>\n2. 形参列表必须包含模板形参表中出现的<span style=\"color:orange\">所有</span>形参\n\n模板形参表的形式：\n- <span style=\"color:orange\">typename</span> 模板形参1, <span style=\"color:orange\">typename</span> 模板形参2, ...\n\n### 实例化(instantiation)\n函数模板的使用形式与普通函数调用相同。\n\n```cpp\nint main() {\n  std::string s1(\"rabbit\"), s2(\"bear\");\n  int iv1 = 3, iv2 = 5;\n  double dv1 = 2.8, dv2 = 8.5;\n\n  // 调用函数模板的实例 swap(string&, string&)\n  swap(s1, s2);\n\n  // 调用函数模板的实例 swap(int&, int&)\n  swap(iv1, iv2);\n\n  // 调用swap的实例 swap(double&, double&)\n  swap(dv1, dv2);\n}\n```\n\n调用函数模板的过程：\n1. 模板实参推断（template argument deduction）：编译器根据函数调用中所给出的**实参的类型**，确定相应的**模板实参**\n2. 函数模板的实例化（instantiation）：模板实参确定之后，编译器就使用**模板实参代替相应的模板形参**，产生并编译函数模板的一个特定版本（称为函数模板的一个*实例*（instance））（注意：此过程中<span style=\"color:orange\">不进行常规隐式类型转换</span>）\n\n### 显示（全）模板特化\n- 在模板当中有些特殊的类型，当想要针对特殊的类型进行一些特殊的操作，这时候就可以用模板的<span style=\"color:orange\">特化</span>\n- 在正常的模板下面接着编写代码，写一个空的template<>然后写个具体的函数代码来补充\n- 如实例所示，当传入的实参类型是int类型，就执行模板的<span style=\"color:orange\">特化部分</span>，而非int类型执行正常的<span style=\"color:orange\">模板推断</span>\n\n```cpp\ntemplate <typename T> void swap(T& v1, T& v2) {\n  T tmp;\n  tmp = v1;\n  v1  = v2;\n  v2  = tmp;\n}\n\ntemplate <> void swap(int& v1, int& v2) {\n  int tmp;\n  tmp = v1;\n  v1  = v2;\n  v2  = tmp;\n  v1 += 10;\n  v2 += 10;\n}\n```\n\n### 模板重载\n对函数模板进行重载：\n- 定义名字相同而函数形参表不同的函数模板\n- 或者定义与函数模板同名的非模板函数(正常函数)，在其函数体中完成不同的行为\n\n编译器是如何确定调用的是这么多同名函数中的哪一个呢？\n\n### 如何确定调用哪个函数\n函数调用的静态绑定规则（重载协议）：\n1. 如果某一同名非模板函数(指正常的函数)的形参类型正好与函数调用的实参类型匹配(完全一致)，则调用该函数。否则，进入第2步\n2. 如果能从同名的函数模板实例化一个函数实例，而该函数实例的形参类型正好与函数调用的实参类型匹配(完全一致)，则调用该函数模板的实例函数。否则，进入第3步\n   - 在步骤2中：首先匹配函数模板的特化，在匹配非指定特殊的函数模板\n3. 对函数调用的实参进行隐式类型转换后与非模板函数再次进行匹配，若能找到匹配的函数则调用该函数。否则，进入第4步\n4. 提示编译错误\n\n```cpp\n// 函数模板demoPrint\ntemplate <typename T>\nvoid demoPrint(const T v1, const T v2){\n  cout << \"the first version of demoPrint()\" << endl;\n  cout << \"the arguments: \" << v1 << \" \" << v2 << endl;\n}\n\n// 函数模板demoPrint的指定特殊\ntemplate <>\nvoid demoPrint(const char v1, const char v2){\n  cout << \"the specify special of demoPrint()\" << endl;\n  cout << \"the arguments: \" << v1 << \" \" << v2 << endl;\n}\n\n// 函数模板demoPrint重载的函数模板\ntemplate <typename T>\nvoid demoPrint(const T v){\n  cout << \"the second version of demoPrint()\" << endl;\n  cout << \"the argument: \" << v << endl;\n}\n\n// 非函数模板demoPrint\nvoid demoPrint(const double v1, const double v2){\n  cout << \"the nonfunctional template version of demoPrint()\" << endl;\n  cout << \"the arguments: \" << v1 << \" \" << v2 << endl;\n}\n\n/* 函数调用 */\nstring s1(\"rabbit\"), s2(\"bear\");\nchar c1('k'), c2('b');\nint iv1 = 3, iv2 = 5;\ndouble dv1 = 2.8, dv2 = 8.5;\n\n// 调用第一个函数模板\ndemoPrint(iv1, iv2);\n\n// 调用第一个函数模板的指定特殊\ndemoPrint(c1, c2);\n\n// 调用第二个函数模板\ndemoPrint(iv1);\n\n// 调用非函数模板\ndemoPrint(dv1, dv2);\n\n// 隐式转换后调用非函数模板\ndemoPrint(iv1, dv2);\n```\n```output\n/* 结果 */\nthe first version of demoPrint()\nthe arguments: 3 5\nthe specify special of demoPrint()\nthe arguments: k b\nthe second version of demoPrint()\nthe argument: 3\nthe nonfunctional template version of demoPrint()\nthe arguments: 2.8 8.5\nthe nonfunctional template version of demoPrint()\nthe arguments: 3 8.5\n```\n结论：函数模板是不进行隐式转换的，只有非函数模板才进行隐式转换\n\n## 类模板\n**使用情景**：<span style=\"color:orange\">定义可以存放任意类型对象的通用容器类</span>\n- 定义一个栈（stack）类，既可用于存放int型对象，又可用于存放float、double、string…甚至任意未知类型的元素\n- 定义一个队列（queue）类，即可用于存放int型对象，又可用于存放float、double、string…甚至任意未知类型的元素\n\n**实现方式**：为类声明一种**模板**，使得类中的某些数据成员、某些成员函数的参数、某些成员函数的返回值，能取任意类型（包括基本类型和用户自定义类型）\n### 定义方式\n类模板的一般形式：\n```cpp\ntemplate <模板形参表>\nclass 类模板名 {\n  类成员声明\n  ...\n}\n```\n在类模板外定义成员函数的一般形式：\n```cpp\ntemplate <模板形参表>\n返回值类型 类模板名<模板形参名列表>::函数名(函数形参表) {\n  函数实现\n  ...\n}\n```\n> 其中模板形参表的形式为：template <typename 类型参数1, typename 类型参数2, ...>\n>\n>（注：模板形参每项是非类型形参、类型形参、模板形参之一。）\n### 示例：链表实现的栈类模板\n\n### 类模板的实例化\n- 类模板是一个通用类模型，而不是具体类，不能用于创建对象，只有经过实例化后才得到具体类，才能用于创建对象\n- 实例化的一般形式：\n  - 类模板名 < 模板实参表 > \n- 模板实参是一个实际类型，如int，double等\n- 一个类模板可以实例化为多个不同的具体类\n  - Stack<int> stack_int\n  - Stack<double> stack_double\n  - Stack<string> stack_string\n\n### 类模板的文件组织形式\n- 一般而言，调用函数时，编译器只需要看到函数的声明即可。所以可以把函数的声明放在 .h 文件中，实现在 .cpp 的实现文件中，使用函数的地方#include 函数的 .h 文件即可\n- 对于模板则不同，要进行实例化，编译器必须能够访问模板定义的源代码\n- 为了在模板中也实现一般的声明定义分离，C++提供了两种模板的编译模型：\n\n- 包含编译模式（inclusion compilation model）\n  - 要求：在函数模板或类模板成员函数的调用点，相应函数的定义对编译器必须是可见的\n  - 实现方式：在头文件中用#include包含实现文件（也可将模板的实现代码直接放在头文件中）\n```cpp\n//genericStack.h\n\n#ifndef GSTACK_H\n#define GSTACK_H\n\n类模板的定义和实现代码\n\n#endif \n\n```\n```cpp\n//client.cpp客户代码\n#include “genericStack.h”\nint main()\n{\n  Stack<int> stack;\t\n  for (int i = 1; i < 9; i++)       \tstack.push(i);\n}\n\n```\n\n- 分离编译模式（separate compilation model）\n  - 要求：声明和定义分离，程序员在实现文件中使用保留字export告诉编译器，需要记住哪些模板定义。\n  - 不是所有编译器都支持该模式\n\n## 非类型模板形参\n- 两类模板形参：类型模板形参和非类型模板形参\n非类型模板形参：\n  - 相当于模板内部的常量\n  - 形式上类似于普通的函数形参\n  - 对模板进行实例化时，非类型形参由相应模板实参的值代替\n  - 对应的模板实参必须是编译时常量表达式\n\n### 示例1：以数组实现的栈类模板\n\n### 示例2：打印函数\n\n#### 不使用非模板形参实现 \n```cpp\ntemplate <typename T>\nvoid printValues(T* arr, int N) {\n  for (int i =0; i != N; ++i)\n  cout<< arr[i] << endl;\n}\n\n\nint main()\n{\n  int intArr[6] = {1, 2, 3, 4, 5, 6};\n  double dblArr[4] = {1.2, 2.3, 3.4, 4.5};\n\n  // 生成函数实例printValues(int*, 6)\n  printValues(intArr, 6);\n\n  // 生成函数实例printValues(double*, 4)\n  printValues(dblArr, 4);\n\n  return 0;\n}\n\n```\n","tags":["C++"],"categories":["C++","Template"]},{"title":"C++ note (12)","url":"//2023/06/19/C-note-12/","content":"# 多态 Ⅱ\n## 抽象类\n### 纯虚函数与抽象类\n### 抽象类语法与语义\n- 能仅能作为基类指针或引用，因为不可能存在抽象对象\n- 不能申明抽象类的对象。例如：Animal a\n- 不能被显式转为抽象类对象。例如：（Animal）dog\n- 不能作为函数参数类型或者返回的值。例如：func(Animal)\n- 能申明为指针或引用，指代自己派生类对象\n\n**为多态而生！**\n### 抽象类与接口\nC++没有接口的概念和定义。\n\nJava接口是由一组函数申明和静态成员构成的特殊类。\n\nC++可以模仿Java的定义描述接口产生类似的效果\n1. 成员函数都是纯虚类\n2. 可以包含静态成员，不包含任何自己的数据\n3. 有虚析构函数，但不需要构造函数\n4. 被虚继承保证唯一，多继承也不会命名冲突\n\n接口的优势：\n- 被继承或被多重继承的派生类必须覆盖实现它的成员\n- 它自己没有数据和业务逻辑，可以无歧义地被多重继承\n- 即使没有任何成员，也可作为任意类型对象的特征。例如：SYSUer 抽象类可作为与中大有时空交集的人的共有特征，如学生，老师，毕业生，进修生 …\n\n虚函数没有定义是链接错误。\n\n## 虚析构\n你可能注意到，程序回避了 new 包含虚函数的类 这样的语句，因为\n- 在抽象类与接口案例中，多态类型指针必须动态转换为对象实际类型指针才能正确执行对象析构过程。\n- EX1：修改 Abstract_type_interface.cpp，取消 dynamic_cast 观察对象是否被正确析构\n\nC++提供了虚析构函数，解决这个问题\n- 虽然析构函数是不继承的，但若基类声明其析构函数为 virtual，则派生的析构函数始终覆盖它。这使得可以通过指向基类的指针 delete 动态分配的多态类型对象\n- EX2：在包含虚函数的基类添加虚析构函数，编译执行，观察多态指针析构过程\n任何包含虚函数的基类的析构函数必须为公开且虚，或受保护且非虚。否则很容易导致内存泄漏\n\n## RTTI运行时类型识别机制\nRTTI (Run Time Type Identification) 即通过运行时类型识别，程序能够使用基类的指针或引用来检查着这些指针或引用所指的对象的实际派生类型。\n\n- C 是一种静态类型语言。其数据类型是在编译期就确定的，不能在运行时更改。\n- 面向对象程序设计中多态性要求，C++中的指针或引用本身的类型，可能与它实际指代(指向或引用)的类型并不一致，需要在运行时将一个多态指针转换为其实际指向对象的类型。\n\nRTTI 提供了两个非常有用的操作符：typeid 和 dynamic_cast。\n- typeid 操作符，返回指针和引用所指的实际类型（type_info 对象）；\n- dynamic_cast 操作符，将基类类型的指针或引用安全地转换为其派生类类型的指针或引用。\n### 关键词：typeid 运算符\n查询类型的信息。用于必须知晓多态对象的动态类型的场合以及静态类型鉴别。\n- 在使用 typeid 前，必须包含头文件 <typeinfo>\n- typeid 返回 std::type_info 对象，它常用的有 ==、!= 运算符 和 name() 成员\n\n语法1：typeid ( 类型 )\n- 指代一个表示 类型 类型的 std::type_info 对象。若 类型 为引用类型，则结果所指代的 std::type_info 对象表示被引用的类型。。\n\n语法2：typeid ( 表达式 )\n- 若 表达式 为标识某个多态类型（即声明或继承至少一个虚函数的类）对象的泛左值表达式，则 typeid 表达式对该表达式求值，然后指代表示该表达式动态类型的 std::type_info 对象。\n- 若 表达式 不是多态类型的泛左值表达式，则 typeid 不对该表达式求值，而是由编译静态推导表达式静态类型的 std::type_info 对象\n\n> typeid 仅对多态指针表达式求值。其他情况都在编译期完成，其结果可以作为 const 常量表达式。\n> \n> 具体案例请见：https://qingcms.gitee.io/cppreference/20210212/zh/cpp/language/typeid.html\n> \n> 高难度C++面试题，往往出在 sizeof 和 typeid 的表达式是否求值等知识点。\n### 关键词：dynamic_cast 类型转换运算符\n沿继承层级向上、向下及侧向，安全地转换到其他类的指针和引用。\n\n语法：dynamic_cast < 新类型 > ( 表达式 )\n\n若转型成功，则 dynamic_cast 返回 新类型 类型的值。\n若转型失败，\n- 且 新类型 是指针类型，则它返回该类型的空指针。\n- 且 新类型 是引用类型，则它抛出与类型 std::bad_cast 的处理块匹配的异常。\n\n![](1.png)\n\n> 侧向是中高级理论题和面试题。\n> \n> 指针和引用不同行为，是理论题的常见考点。\n> \n> 注意，抽象基类一般有虚析构\n\n### 关键字：`final`（C++11）\n指定某个虚函数不能在子类中被覆盖，或者某个类不能被子类继承。官方例子\n```cpp\nstruct Base {\n  virtual void foo();\n}; \nstruct A : Base {\n  void foo() final; // Base::foo 被覆盖而 A::foo 是最终覆盖函数\n  void bar() final; // 错误： bar 不能为 final 因为它非虚\n};\n \nstruct B final : A  { // struct B 为 final\n  void foo() override; // 错误：foo 不能被覆盖，因为它在 A 中是 final\n};\n \nstruct C : B { // 错误：B 为 final\n};\n```\n## 多态的实现原理\n","tags":["C++"],"categories":["C++","Polymorphism"]},{"title":"C++ note (11)","url":"//2023/06/19/C-note-11/","content":"# 多态 Ⅰ\n## 虚函数及其意义\n### 概念\n虚函数是一个类的成员函数，前面有关键字 `virtual`\n\n- 作用：在公有继承层次中的一个或多个派生类中对虚函数进行重定义。当派生类的对象使用它基类的指针（或引用）调用虚函数时，将调用该对象的成员函数。\n\n“一旦为虚，永远为虚”\n- 含义1：在公有继承层次中，某个类的成员函数申明为 virtual。则其直接或间接派生类中的相同签名的函数，都是虚函数。不论是否用关键字 virtual 再次申明。\n- 含义2：任何虚函数，都有可能被其派生类再次重新定义，重新定义后依然是虚函数。因此，虚函数既可以被继承，也可以被重新定义。\n### 意义\n### Override and Overwrite\n覆盖（override）- 修改基类函数定义\n- 基类或非直接基类，至少有一个成员函数被 virtual 修饰\n- 派生类虚函数必须与基类虚函数有同样签名，即函数名，参数类型，顺序和数量都必须相同。\n\n隐藏（overwrite）- 屏蔽基类的函数定义\n- 派生类的函数与基类的函数同名，但是参数列表有所差异。\n- 派生类的函数与基类的函数同名，参数列表也相同，但是基类函数没有virtual关键字。\n\n对象指针（引用）被向上转型到基类指针（引用）\n- 覆盖：调用该对象的虚函数\n- 隐藏：调用基类的函数\n派生类对象赋值到基类对象\n- 按基类行为调用该函数\n\n| |作用域|是否虚函数|函数名|函数签名|\n|:---:|:---:|:---:|:---:|:---:|\n|重载|相同|-|相同|不同|\n|隐藏/屏蔽|不同|否|相同|不同/相同|\n|覆盖|不同|是|相同|相同|\n## 多态的概念\n### 概念\n程序语言中，多态特指一个标识符指代不同类型的数据。或者说，由具体的数据类型决定该标识符的语义。\n\n#### 满足多态定义的标识符\n函数重载（Function Overload）\n- 函数名，它可为不同类型函数（注：函数类型声明为 f(t1,t2…)）\n- \n方法覆盖（Method Override）\n- 有虚函数基类的 指针或引用，它可指代派生类的对象\n\n泛型（Generics）/模板（Template），即“参数化类型”\n- 模板名，例如 vector 可泛化指代各种类型数据的数组\n---\n多态标识符必须指派具体的函数或方法以实现规定的语义。\n\n静态绑定：如果在运行前由编译完成这个指派，称为静态绑定\n\n动态绑定：如果在运行期间完成这个指派，称为动态绑定\n## 多态-函数重载\n## 多态-动态模型\n### 静态类型与动态类型\n静态类型\n- 对程序进行编译时分析所得到的表达式的类型被称为表达式的静态类型。程序执行时静态类型不会更改。\n\n动态类型\n- 若某个泛左值表达式指代某个多态对象，则其最终派生对象的类型被称为其动态类型。\n```cpp\nstruct B {virtual ~B(){}}; \n// 多态类型，至少包含一个虚函数\n\nstruct D:B{} // 多态类型\nD d; // 最终派生对象\nB* ptr = &d;\n// (*ptr)的静态类型为B\n// (*ptr)的动态类型为D\n```\n> cppreference: type class\n\n### 静态类型——静态绑定\n重写一个相同函数名、相同参数的函数，会覆盖或隐藏之前继承而来的函数。\n\n基类指针指向派生类对象，这对于实现多态性的行为是至关重要的。\n### 动态类型——动态绑定\n仅需要在基类的成员函数前面加上virtual关键字，就能把一个函数声明为虚函数。该类及其子类都是多态类型。\n\n当多态类型指针（或引用）调用虚函数时，则产生多态现象，即调用指针所指向的对象的成员函数\n\n> 在面向对象编程中，多态与继承层次结构相关，使开发人员可以“用通用的方法编程”而不是局限于“用特殊的方法编程”。\n>\n> 在现实中会经常用到多态，比如“移动move”这一行为在大象和猴子中有不同表现形式，“发薪水”这一行为在教授、副教授、讲师之中可能有不同的计算方式，“绘制draw”这一行为对于三角形、正方形也是不同的。\n> \n> 特别是我们设计程序库时，根本不可能知道用户行为的具体实现方式。多态为适应这种变化和扩展提供了便利\n","tags":["C++"],"categories":["C++","Polymorphism"]},{"title":"C++ note (10)","url":"//2023/06/10/C-note-10/","content":"# 继承和派生 Ⅲ\n## 类型兼容性\n赋值运算的类型兼容性\n- 可以将后代类的对象赋值给祖先类对象，反之不可。\n- 每个派生类对象包含一个基类部分，这意味着可以将派生类对象当作基类对象使用。\n```map\n     ---------    -----------\n     |   i   | <- |    i    |\n     |   j   | <- |    j    |\n     | x_tmp | <- |  x_tmp  |\n     ---------    | nmember |\n        obj1      -----------\n                      obj2\n```\n```cpp\nbase obj1;\ny1   obj2;\nobj1 = obj2; // 把obj2中基类部分的内容赋给obj1\nobj2 = obj1; // wrong\n```\n> 赋值运算符必须是成员函数实现。因此，赋值运算总是使用左操作数类型的赋值运算。\n> \n> 因此，子类对象赋值给父类变量是正确的，但会放弃派生扩展的内容。反之，必须从语法层面禁止父类对象赋值子类。\n> \n> 如果需要完成 obj2 = obj1，必须显式给出 `*（base *）（&obj2）= obj1`\n\ny1继承base，且\n\nbase obj1\n\ny1   obj2\n- 指向基类对象的指针也可指向公有派生类对象\n```cpp\nbase *p;\ny1   *p;\np = &obj1; // ok\np1= &obj1; // wrong\np = &obj2; // ok\np1= &obj2; // ok\np = p1;    // ok\n```\n- <span style=\"color:orange\">只有公有派生类才能兼容基类类型</span>（上述规则只适用于共有派生）\n### 举例\n```cpp\n// b.h\n\nclass base {\n  public:\n    void display();\n};\n\nclass d1 : public base {\n  public:\n    void display();\n};\n\nclass d2 : public d1 {\n  public:\n    void display();\n};\n```\n```cpp\n// b.cpp\n\n#include \"b.h\"\n\nvoid base::display() {\n  cout << \"base::display()\" << endl;\n}\n\nvoid d1::display() {\n  cout << \"d1::display()\" << endl;\n}\n\nvoid d2::display() {\n  cout << \"d2::display()\" << endl;\n}\n\nvoid fun(base *ptr) {\n  ptr->display();\n}\n\nint main() {\n  base b; // 声明base类对象\n  d1 d1;  // 声明d1类对象\n  d2 d2;  // 声明d2类对象\n  base *p;// 声明base类指针\n  p = &b;   // base类指针指向base类对象\n  fun(p);\n  p = &d1;  //base类指针指向d1类对象\n  fun(p);\n  p = &d2;  //base类指针指向d2类对象\n  fun(p);\n}\n```\n```output\nbase::display()\nbase::display()\nbase::display()\n\n// 解释：形参是指针类型，其基类名为base\n```\n## 类的类型转换\n### Upcasting and Downcasting\nUpcasting（向 上/基 类型转换）\n- Assigning a pointer of a derived class type to a pointer of its base class type. Done implicitly\n```cpp\ngeometricObj *p = new circle(1);\ncircle *p1 = new circle(2);\np = p1;\n```\nDowncasting（向 下/派生 类型转换）\n- Assigning a pointer of a base class type to a pointer of its derived class type\n- Done explicitly using dynamic_cast\n```cpp\np1 = dynamic cast<circle *>(p);\n```\n### Dynamic Casting\nThe display function ：\n```cpp\n// A function for displaying a geometric object\nvoid display(Figure *p) {\n  cout << \"The area is \" << p->get_area() << endl;\n}\n```\n```cpp\n// A function for displaying a geometric object\nvoid display(Figure *p) {\n  Circle* circlePtr =  p;//?\n  cout << \"The area is \" << circlePtr ->get_area() << endl;\n}\n```\n### Casts\nstatic_cast\n- Used to convert one data type to another and hands all reasonable casts\n```cpp\naverage = (float) hits / (float) at_bats;\naverage = static_cast<float>(hits) / static_cast<float>(at_bats);\n```\nconst_cast\n- Used to cast away constness.\n```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n   const int i = 100;\n   const int *p = &i;\n   int *q = const_cast<int*>(p);\n   int j = i;\n\n   cout << i << endl << j<<endl \n << *p << endl  << *q <<endl;\n  return 0;\n}\n```\n> 很坑，请按案例。\n> \n> Const 转为 非 const，\n> \n> （1）c语言中，const 默认解释为 常量或字面量，所以转后也无法修改；\n> \n> （2）解释为，编译生成一个temp可变量，给你修改\n\n```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n   const int i = 100;\n   const int &p = i;\n   int &q = const_cast<int&>(p);\n   int j = i;\n\n   cout << i << endl << j << endl\n << p << endl << q <<endl;\n   return 0;\n}\n```\nreinterpret_cast\n- converts between unrelated types such as an integer to a pointer or  a pointer to an unrelated pointer type.\n```cpp\nint *ip;\nchar *cp;\nvoid *gp;\ncp=ip;   \nip=cp;\ncp=gp;\ngp=cp;\ncp=reinterpret_cast<char*>(gp);\n```\n> 请打开代码中注释，编译去掉出错的语句，解释出错原因：\n>\n> （1）有类型指针间，不能隐式转换，除非向上转换;\n>\n> （2）有类型指针可隐式转为通用类型指针，反之不行；\n>\n> （3）其他需要显式转换，c++建议用 reinterpret 转指针\n\ndynamic_cast\n- Used for casting across or within inheritance.\n- This cast is used with classes having <span style=\"color:orange\">virtual functions</span>. \n## 多重继承\n### C++支持的多继承\n多重继承：派生类继承多个基类\n- 代表概念：C既 is a A 又 is a B\n```cpp\nclass 派生类名 : 继承控制1, 基类名1, 继承控制2, 基类名2, ... {\n  成员声名;\n}\n```\n重复继承：菱形继承\n- 多重继承特例，base A被派生两次以上\n\n举例——device\n```cpp\nclass device1 {\n  public:\n    device1() : volume(5), powerOn(false) {}\n    device1(int vol, bool onOrOff) : volume(vol), powerOn(onOrOff) {}\n    void showVol() {\n      cout << \"Volume is \" << volume << endl;\n    }\n\n  protected:\n    int volume;\n    bool powerOn;\n};\n\nclass device2 {\n  public:\n    device2() : talkTime(10), standByTime(300), power(100) {}\n    device2(int newTalkTime,int newStandByTime, float powerCent) : talkTime(newTalkTime), standByTime(newStandByTime), power(powerCent) {}\n\n    void showProperty() {   \n      cout << \"The property of the device : \"<< endl;\n      cout << \"talk time: \" << talkTime << \" hours\" <<endl;\n      cout << \"standbyTime: \" << standbyTime << \" hours\" <<endl;\n    }\n    void showPower() {\n      cout <<\" Power: \" << power << endl;\n    }\n\n  protected:\n    int   talkTime;                        //可通话时间（小时）\n    int   standbyTime;                //可待机时间（小时）\n    float power;                          //剩余电量百分比\n};\n\nclass deviceNew: public device1, public device2 {\n  public:\n    deviceNew() {\n      weight = 0.56;\n    } \n\n    deviceNew(float newWeight, int vol, bool onOrOff, int newTalkTime, int newStandbyTime, float powerCent) : \n      device2(newTalkTime, newStandbyTime, powerCent), \n      device1(vol, onOrOff) {\n        weight = newWeight;\n        }\n\n    float getWeight() {\n      return weight;\n    }\n\n  private:\n    float weight;              // 重量（克）\n};\n```\n```cpp\nint main() {\n  deviceNew  device(0.7, 3, false, 10, 250, 80);         //声明派生类对象\n\n  // getWeight()函数是DEVICE_NEW类自身定义的\n  cout << \"The weight of the device : \" <<device.getWeight()<<endl; \n\n  // showVol()函数是从DEVICE1类继承来的\n  device.showVol();\n\n  // showProperty()函数是从DEVICE2类继承来的\n  device.showProperty();\n\n  return (0);\n}\n```\n```output\nThe weight of the device : 0.7\nVolume is 3\nThe property of the device :\ntalk time: 10 hours\nstandbyTime: 250 hours\n\n```\n### 虚基类\n继承基类时，在继承访问控制前添加保留字 “virtual”。 那么这个基类就是一个虚拟基类。\n虚拟基类用于共享继承。\n\n**普通基类与虚基类之间的唯一区别只有在派生类重复继承了某一基类时才表现出来。**\n\n若派生类有一个虚基类作为祖先类，则在派生类构造函数中需要列出对虚基类构造函数的调用（否则，调用虚基类的默认构造函数），且对虚基类构造函数的调用总是先于普通基类的构造函数。 \n\n创建后代类对象时，当该后代类列出的虚基类构造函数被调用，Virtual关键字保证了<span style=\"color:orange\">虚基类的唯一副本只被初始化一次</span>。\n\n创建派生类对象时构造函数的**调用次序**：\n- 最先调用虚基类的构造函数；\n- 其次调用普通基类的构造函数，多个基类则按派生类声明时列出的次序、从左到右调用，而不是初始化列表中的次序；\n- 再次调用对象成员的构造函数，按类声明中对象成员出现的次序调用，而不是初始化列表中的次序\n- 最后执行派生类的构造函数。\n\n举例：\n```cpp\nclass base {\n  public:\n    int i;\n}; \nclass base1: virtual public base {\n  public:\n    int j;\n};\nclass base2: virtual public base {\n  public:\n    int k;\n}; \nclass derived: public base1, public base2 {\n  public:\n    int sum;\n}; \nint main() {\n  derived obj;    // 声明一个派生类对象 \n  obj.i = 3;       // 正确：从base继承的i在derived中只有一份\n  obj.j = 5;       // 正确：使用从base1继承的j\n  obj.k = 7;       // 正确：使用从base2继承的k\n  return (0);\n}\n```\n举例：\n```cpp\nclass baseA {\n  public:\n    baseA() {\n      cout << \"This is baseA class.\" << endl;\n    }\n};\nclass baseB {\n  public:\n    baseB() {\n      cout << \"This is baseB class.\" << endl;\n    }\n};\nclass derivedA : public baseB, virtual public baseA {\n  public:\n    derivedA() {\n      cout << \"This is derivedA class.\" << endl;\n    }\n};\nclass derivedB : public baseB, virtual public baseA {\n  public:\n    derivedB() {\n      cout << \"This is derivedB class.\" << endl;\n    }\n};\nclass derived : public derivedA, virtual public derivedB {\n  public:\n    derived() {\n      cout << \"This is Derived class.\" << endl;\n    }\n};\nint main() {\n  derived obj;\n  return (0);\n}\n```\n```output\nThis is baseA class.\nThis is baseB class.\nThis is derivedB class.\nThis is baseB class.\nThis is derivedA class.\nThis is derived class.\n\n```\n构造顺序：\n- 先基类后成员\n- 先虚后实\n- 先左后右\n\n析构顺序：\n- 与构造顺序相反\n","tags":["C++"],"categories":["C++","Inheritance and Derivation"]},{"title":"C++ note (9)","url":"//2023/06/08/C-note-9/","content":"# 继承和派生 Ⅱ\n## 派生与构造函数\n### 类不可继承的成员\n类不可继承的成员有\n1. 私有成员\n2. 构造函数与析构函数\n```cpp\nclass MyString : public std::string {\n  public:\n    MyString(const char* s): string(s) {};\n};\n \nint main() {    \n    //ex1: 编译，并观看编译日志 \n    MyString str1(\"继承 string(const *char)\"); \n    str1 = \"继承 string::operator=(...)\";\n    cout << str1 << endl;\n    MyString str2 = \"hello \";\n    cout << str2 + str1 << endl;\n    //ex2: 取消第 6 行注释，编译并运行 \n    return 0; \n}\n```\n### 向基类构造函数传递实参\n若<span style=\"color:orange\">基类构造函数带参数</span>，则定义派生类构造函数时，<span style=\"color:orange\">仅能</span>通过初始化列表显式调用基类构造函数，并向基类构造函数传递实参。 \n\n带初始化列表的派生类构造函数的一般形式如下\n```cpp\n派生类名(形参表) : 基类名(实参表) {\n  派生类新成员初始化赋值语句;\n};\n```\n举例：time类\n```cpp\n//  SPECIFICATION FILE (time.h)\n\nclass time {\n  public:\n    void set(int hours, int minutes, int seconds); // 将被修改\n    void increment(); // 将被继承\n    void write() const;\n    time(int initHrs, int initMins, int initSecs);\n    time();\n\n  private:\n    int hrs;\n    int mins;\n    int secs;\n};\n```\n```cpp\n// SPECIFICATION FILE ( extTime.h)\n#include “time.h”\n\nenum zoneType {\n  EST, CST, MST, PST, EDT, CDT, MDT, PDT\n}; // 枚举类型\n\nclass extTime : public time {\n  public:\n    extTime(int initHrs, int initMins, int initSecs,\n    zoneType initZone);\n    extTime();\n    void set(int hours, int minutes, int seconds, \n    zoneType timeZone) ; // 扩展函数成员\n    void write() const;\n\n  private:\n    zoneType zone; // 增加数据成员\n};\n```\n```cpp\n// IMPLEMENTATION FILE (extTime.cpp)\n\nextTime::extTime(int initHrs, int initMins, int initSecs, zoneType initZone, zone(initZone)) : time(initHrs, initMins, initSecs) { // 初始化基类成员\n  zone = initZone; // 初始化派生类成员\n}\n```\n1. 初始化器列表中写 zone(initZone) 更显 `C++` 风格\n2. 传递给基类构造函数\n3. 基类构造函数在派生类构造函数之前调用\n```cpp\n//base class default constructor is called prior to the derived //class default constructor.\n\nextTime::extTime() { // 编译器默认添加 `:time()` 初始化基类成员\n    zone = EST; // 如果枚举值标识符崇明，使用类型::枚举值。例如：zoneType::EST\n}\n```\n```cpp\nvoid extTime::set( int hours, int minutes, int seconds, zoneType timeZone) {\n  time::set(hours, minutes, seconds);   //调用基类函数。Why?\n  zone = timeZone;\n}\n\nvoid extTime::write() const\n{\n  static string zoneString[8] ={\n    \"EST\", \"CST\", \"MST\", \"PST\", \"EDT\", \"CDT\", \"MDT\", \"PDT\"\n  }; // 数组比switch语句好\n  time::write();\n  cout << ' ' << zoneString[zone];\n}\n```\n## 派生与成员函数\n### 概念\n1. 重载（overload）\n   1. 具有相同的作用域(即同一个类定义中)；\n   2. 函数名字相同\n   3. 参数类型(包括const 指针或引用) ，顺序 或 数目不同\n2. 覆盖（override）- <span style=\"color:orange\">修改</span>基类函数定义\n   \n    (记得加链接)\n\n3. 隐藏（overwrite）- <span style=\"color:orange\">屏蔽</span>基类的函数定义\n   1. 派生类的函数与基类的函数同名，但是参数列表有所差异。\n   2. 派生类的函数与基类的函数同名，参数列表也相同，但是基类函数没有 `virtual` 关键字。\n4. 继承（inheritance）\n   1. 没有被覆盖或隐藏的基类函数，包括在**基类中重载的函数**\n### 重载和隐藏的区别\n例如\n- time::set(int, int, int)\n- exTime::set(int, int, int)\n> 注： int, *int, const* int 算不同的参数类型\n> > ownership 还在函数调用点外部\n> \n> int 和 const int 算相同的参数类型\n> > 传参已经 copy，不再管 constant modifier\n\n如果 set 在一个类中定义，则是重载\n> set 的签名不一样\n\n如果**同名**函数出现在 baseClass 和 derivedClass 中，且满足隐藏的特征 1 或 2\n- exTime 案例 set 满足特征 1\n- exTime 案例 write 满足特征 2\n所以它们都属于隐藏\n### 隐藏的应用\n- 利用隐藏，实现在派生类中修改成员函数的功能，如 write\n- 利用隐藏，赋予派生类成员函数新的功能\n```cpp\n//  IMPLEMENTATION FILE ( time.cpp )\nvoid time::set( int hours, int minutes, int seconds) {\n    hrs = hours;\n    mins = minutes;\n    secs = seconds;\n}\n```\n```cpp\n// IMPLEMENTATION FILE ( extTime.cpp )\nvoid extTime::set( int hours, int minutes, int seconds, zoneType timeZone) {\n  time::set(hours, minutes, seconds);\n  zone = timeZone;\n}\n```\n```cpp\n// base.h\n\nclass base {\n  public:\n    // 没有默认构造\n    base(int p1, int p2);\n    int inc1();\n    int inc2(); // 被继承\n    void display();\n\n  private:\n    int mem1, mem2;\n};\n```\n```cpp\n#include \"base.h\"\n// derived.h\n\nclass derived : public base {\n  public:\n    derived(int x1, int x2, int x3, int x4, int x5);\n    int inc1();\n    int inc3(); // 新添成员\n    void display(); // 隐藏规则 2， 修改定义\n  \n  private:\n    int mem3;\n    base mem4; // 类成员，注意初始化方法\n}\n```\n```cpp\n#include \"base.h\"\n\nbase::base(int p1, int p2) {\n  mem1 = p1;\n  mem2 = p2;\n}\n\nint base::inc1() {\n  return ++mem1;\n}\n\nint base::inc2() {\n  return ++mem2;\n}\n\nvoid base::display() {\n  cout << \"mem1 = \" << mem1 << \", mem2 = \" << mem2 << endl; \n}\n```\n```cpp\n#include \"derived.h\"\n\nderived::derived(int x1, int x2, int x3, int x4, int x5) : base(x1, x2), mem4(x3, x4) { // 基类、类成员初始化\n  mem3 = x5; // 基类、类成员 不能在这里初始化！\n}\n\nint derived::inc1() {\n  return base::inc1();\n}\n\nint derived::inc3() {\n  return ++mem3;\n}\n\nvoid derived::display() {\n  base::display(); // 被隐藏函数成员调用\n  mem4.display();\n  cout << \"mem3 = \" << mem3 << endl;\n}\n```\n```cpp\n#include \"derived.h\"\nint main() {\n  derived obj(17, 18, 1, 2, -5);\n  obj.inc1();\n  obj.display();\n  return (0);\n}\n```\n### 存储结构\n（todo）\n## 改变访问控制\n### 恢复访问控制方式\n基类中的 public 或 protected 成员，因使用 protected 或 private 继承访问控制而导致在派生类中的访问方式发生改变，可以使用“访问声明”<span style=\"color:orange\">恢复为原来的访问控制方式</span>\n\n访问声明的形式\n```cpp\nusing 基类名::成员名;（放于适当的成员访问控制后）\n```\n使用情景\n- 在派生类中<span style=\"color:orange\">希望大多数继承成员为 protected 或 private，只有少数希望保持为基类原来的访问控制方式</span>\n```cpp\nclass base {\n  public:\n    void set_i(int x) {\n      i = x;\n    }\n    int get_i() {\n      return i;\n    }\n  protected:\n    int i;\n};\n\nclass derived : private base {\n  public:\n    using base::set_i;\n    using base::i;\n    void set_j(int x) {\n      j = x;\n    }\n    int get_ij() {\n      return i + j;\n    }\n  protected:\n    int j;\n};\n```\n```cpp\nint main() {\n  derived obj; // 声明一个派生类的对象\n  obj.set_i(5); // set_i()已从private转为public\n  obj.set_j(7);\n  cout << obj.get_ij() << endl;\n  return (0);\n}\n```\n### 屏蔽基类成员\n目的：\n- 使得客户代码通过派生类对象不能访问继承成员。\n\n方法：\n- 使用继承访问控制protected和private（真正屏蔽）\n- 在派生类中成员访问控制 protected 或 private 之后，使用 “using 基类名::成员名”（非真正屏蔽，仍可通过使用“基类名::成员名”访问）\n### 用于继承对象的重命名\n目的：\n- 解决名字冲突。\n- 在派生类中选择更合适的术语命名继承成员。\n\n方法\n- 在派生类中定义新的函数，该函数调用旧函数；屏蔽旧函数。\n- 在派生类中定义新的函数，该函数的函数体与旧函数相同。\n### 使用基类构造函数\n目的：\n- 使得派生类对象直接使用基类的构造函数。\n\n方法：\n- 在派生类中使用 `using 基类名::基类名`\n### 继承机制的应用举例-图形的处理\n将圆看作是一种带有半径的点，将点看作是一种带有显示状态的位置\n```cpp\n//说明：类location以x和y坐标描述了计算机屏幕上的一个位置。\n\n#include <graphics.h>\n// basegraph.h\n\nclass location {\n  public:\n    location(int x, int y); // 构造函数，将当前位置设置为(x, y)\n    int get_x();  // 返回当前位置的x坐标\n    int get_y();  // 返回当前位置的y坐标\n\n  protected:\n    // 位置的内部状态，在LOCATION的派生类中需要访问\n    int x_pos, y_pos;  \n};\n\nclass point : public location {\n  public:\n    point(int x, int y);\n\n    bool isVisible();\n    void show();\n    void hide();\n    void moveTo(int x, int y);\n  protected:\n    bool visible;\n};\n\nclass circle : public point {\n  public:\n    circle(int x, int y, int r);\n    void show();\n    void hide();\n    void moveTo(int x, int y);\n    void expand(int delta);\n    void contract(int delta);\n  protected:\n    int radius;\n};\n```\n```cpp\n#include \"basegraph.h\"\n// location.cpp\n\nlocation::location(int x, int y) {\n  x_pos = x;\n  y_pos = y;\n}\n\nint location::get_x() {\n  return x_pos;\n}\n\nint location::get_y() {\n  return y_pos;\n}\n\npoint::point(int x, int y) : location(x, y) {\n  visible = false;\n}\n\nbool point::isVisible() {\n  return visible;\n}\n\nvoid point::show() {\n  if(!isVisible()) {\n    visible = true;\n    putpixel(x_pos, y_pos, getcolor());\n  }\n}\n\nvoid point::hide() {\n  if(isVisible()) {\n    visible = false;\n    putpixel(x_pos, y_pos, getbkcolor());\n  }\n}\n\nvoid point::moveTo(int x, int y) {\n  hide();\n  x_pos = x;\n  y_pos = y;\n  show();\n}\n```\n```cpp\n#include \"basegraph.h\"\n// circle.cpp\n\ncircle::circle(int x, int y, int,r) : point(x, y), radius(r) {}\n\nvoid circle::show() {\n  if(!isVisible()) {\n    visible = true;\n    circle(x_pos, y_pos);\n  }\n}\n\nvoid circle::hide() {\n  unsigned int tmpColor;\n  if(isVisible()) {\n    tmpColor = getcolor();\n    setcolor(getbkcolor());\n    visible = false;\n    circle(x_pos, y_pos, radius);\n    setcolor(tmpColor);\n  }\n}\n\nvoid circle::moveTo(int x, int y) {\n    hide();\n    x_pos = x;\n    y_pos = y;\n    show();\n  }\n\nvoid circle::expand(int delta) {\n    hide();\n    radius = radius + delta;\n    if(radius < 0) {\n      radius = 0;\n    }\n    show();\n  }\n\nvoid circle::contract(int delta) {\n    expand(-delta);\n  }\n```\n```cpp\n#include <conio.h> // 利用其中的getch()函数暂停\n#include \"basegraph.h\"\n// graphdemo.cpp\n\nint main() {\n  int graphdriver = DETECT, graphmode ; // 初始化图形系统所需变量\n  // 声明一个圆，圆心在(100, 200)，半径为50\n  CIRCLE circle(100, 200, 50);\n  initgraph(&graphdriver, &graphmode, \"\"); // 初始化图形系统\n  circle.show();  // 声明一个圆并显示它\n  circle.move_to(200, 250);  // 移动圆\n  circle.expand(50); // 放大圆\n  circle.expand(50);\n  circle.contract(65); // 缩小圆\n  circle.contract(65);\n  closegraph();  // 关闭图形系统\n  return (0);\n} //注：此代码需要电脑事先安装好图形相关库环境\n```\n### 继承对象的重定义\n派生类中修改继承成员函数的语义（即，修改函数体，而保持函数原型不变）\n\n派生类中的名字屏蔽基类中的名字\n```cpp\n// 说明：类point描述了某一个位置是隐藏的还是显示的。\n// 以public继承表示x_pos和y_pos在POINT中是protected\nclass point : public location {\n  public:\n      :\n    void show();     // 在当前位置显示点\n    void hide();       // 将点隐藏起来\n    // 将当前点移动到新位置(x, y)并显示它\n    void move_to(int x, int y); \n  protected:\n      :\n};\n\n// 说明：类circle描述了一个在屏幕上由point派生出来的圆。\n// 由point类派生，从而也继承了location类\nclass circle : public point {\n  public:\n    :\n  void show(); // 在屏幕上画出圆\n  void hide(); // 将圆隐藏起来\n  void move_to(int x, int y); // 将当前圆移动到新位置(x, y)\n    :\n  protected:\n    :\n};\n```\n```cpp\nvoid point::show() {\n  if (!isVisible()) {\n    visible = true;\n    putpixel(x_pos, y_pos, getcolor()); \n  }\n}\n\nvoid circle::show() {\n  if (!isVisible()) {\n    visible = true;\n    circle(x_pos, y_pos, radius);\n  }\n}\n```\n```cpp\n#include \"basgraph.h\" // 基本图形元素的类界面 \n#include <conio.h> // 利用其中的getch()函数暂停 \nint main() {\n     :\n  // 声明一个圆，圆心在(100, 200)，半径为50\n  point point( 20, 10 ); \n  circle circle(100, 200, 50);\n\n  circle.show();  // 显示圆\n  point.show();  // 显示点\n\n  circle.moveTo(200, 250);  // 移动圆\n  point.moveTo(100,20);     // 移动点\n      :\n}\n```\n","tags":["C++"],"categories":["C++","Inheritance and Derivation"]},{"title":"C++ note (8)","url":"//2023/06/08/C-note-8/","content":"# 继承和派生 Ⅰ\n## 继承/派生\n### 概念\n派生类(derived class)是通过对基类(base class)进行**扩充和修改**得到的。基类的所有成员**自动成为**派生类的成员。在基类中除了自己定义的成员之外，还自动包括了派生类中定义的数据成员与成员函数，这些自动继承下来的成员称为基类的<span style=\"color:orange\">继承成员</span>\n\nbase class / parent class / super class\n\nderived class / sub class\n\n继承代表了从属(is-a)关系\n### 提出继承/派生概念的原因\n- 是通常所说的oop的基础\n- 继承提供了一种通过修改（演化）一个或多个现有类来构造新类的方法\n- 如果只有一个类的概念，软件的可重用性、演化和相关的概念表示存在严重的不灵活问题。继承机制为软件可重用性、IS-A 概念表示和易于修改提供了解决方案\n### 图解\n```pic\n        A\n      ↗  ↖\n    B       C\n单继承：派生类只有一个直接基类\n```\n```pic\n    A       B\n      ↖  ↗\n        C\n多重继承：派生类具有两个及以上直接基类\n```\n```pic\n        A\n      ↗  ↖\n    B       C\n      ↖  ↗\n        D\n菱形继承：派生类两次或两次以上重复继承某个祖先类\n```\n## 语法与访问控制\n### 继承关系语法\n单重继承的定义形式\n```cpp\nclass derivedClass_name : inheritanceControl baseClass_name {\n  objectControl:\n    objectDeclaration_list;\n};\n```\n### 继承中的访问控制\n继承访问控制和成员访问控制均由保留public、protected、private来定义，<span style=\"color:orange\">缺省均为private</span>\n- private\n\n  私有成员**只能通过本类**的成员函数来访问\n- public\n\n  公有成员用于描述一个类与外部世界的接口，类的外部（程序的其它部分的代码）可以访问公有成员\n- protected\n\n  受保护成员具有private与public的双重角色：\n  \n  对派生类的成员函数而言，它为public，而对类的外部而言，它为private。即：<span style=\"color:orange\">protected成员只能由本类及其后代类的成员函数访问</span>\n\n影响继承成员（派生类从基类中继承而来的成员）访问控制方式的两个因素：\n1. **定义**派生类时**指定**的继承访问控制\n2. 该成员在**基类中所具有的**成员访问控制\n\n![](pic1.jpg)\n- 无论采用什么继承方式，基类的私有成员在派生类中都是不可访问的。\n- **“私有”和“不可访问”有区别**：私有成员可以由派生类本身访问，不可访问成员即使是派生类本身也不能访问。\n- 大多数情况下均使用 public 继承\n\n举例：\n```cpp\nclass base {\n\n  public:\n    base();\n    void get_ij();\n\n  protected:\n    int i, j;\n\n  private:\n    int temp;\n};\n\n//公有派生：在y1类中，i、j是受保护成员\nclass y1 : public base {\n\n  public: \n    void increment(); // get_ij()是公有成员，temp不可访问\n\n  private:\n    float member;\n};\n\nbase::base() : i(0), j(0), temp(0) {}\n\nvoid base::get_ij() {\n  cout << i << \" \" << j << endl;\n}\n\nvoid y1::increament() {\n  ++i;\n  ++j;\n}\n```\n```cpp\nint main() {\n  base obj1;\n  y    obj2;\n  obj2.increament();\n  obj2.get_ij();\n  obj1.get_ij();\n  return (0);\n}\n```\n```output\n1 1\n0 0\n```\n保护派生：在y2类中，i、j是受保护成员。get_ij()变成受保护成员，temp不可访问\n\n`class y2 : protected BASE{  … };`\n\n私有派生：在y3类中，i、j、 get_ij()都变成私有成员，temp不可访问\n\n`class y3 : private BASE{  … };`\n\n在大多数情况下，使用public的继承方式；private和protected很少使用\n\n### 派生类对象的存储\n- 派生类的对象不仅存放了在派生类中定义的非静态数据成员，而且**也存放了从基类中继承下来的非静态数据成员**\n- 可以认为派生类对象中**包含了基类子对象**\n## 构造与析构顺序\n### 继承时的构造函数\n基类的构造函数不被继承，<span style=\"color:orange\">派生类中需要声明自己的构造函数</span>\n\n派生类的构造函数中<span style=\"color:orange\">只需要对本类中新增成员进行初始化</span>即可。对继承来的基类成员的初始化是通过编译在派生类构造函数初始化器中自动生成默认构造函数（默认拷贝构造）完成。\n\n> <span style=\"color:orange\">如果基类没有默认构造（包括 = delete），则编译错误</span>\n\n派生类的构造函数**需要使用**基类的有参构造函数时，必须显式地在初始化器列表中申明。\n> 注意：**不能在构造函数内调用！**\n\n构造函数的调用次序（创建派生类对象时）\n- 首先调用其基类的构造函数（调用顺序按照基类被继承时的声明顺序（从左向右））。\n- 然后调用本类对象成员的构造函数（调用顺序按照对象成员在类中的声明顺序）。\n- 最后调用本类的构造函数。\n### 继承时的析构函数\n撤销派生类对象时析构函数的调用次序与构造函数的调用次序相反\n- 首先调用本类的析构函数\n- 然后调用本类对象成员的析构函数\n- 最后调用其基类的析构函数\n\n```cpp\n//demo.h \nclass C {\n  public:\n    C( );\n    ~C( );\n};\n\nclass base {\n  public:\n    base( );\n    ~base( );\n}; \n```\n```cpp\n#include “demo.h”\n//demo.cpp\nC::C( ) {\n  cout << \"Constructing C object.\" << endl;\n}\n\nC::~C( ) {\n  cout << \"Destructing C object.\" << endl;\n}\n\nbase::base( ) {\n  cout << \"Constructing base object.\" << endl;\n}\n\nbase::~base( ) {\n  cout << \"Destructing base object.\" << endl;\n}\n```\n```cpp\n// Derived.h\nclass derived : public base {\n  public:\n    derived()\n    ~derived()\n  private:\n    C newObj;\n}; \n```\n```cpp\n#include “Derived.h”\n// Derived.cpp\nderived::derived() {\n  cout << \"Constructing derived object.\" << endl;\n}\n\nderived::~derived() {\n  cout << \"Destructing derived object.\" << endl;\n}\n```\n```cpp\n#include “Derived.h”  \n// Client.cpp\nint main() {\n  derived obj; // 声明一个派生类的对象\n  // 什么也不做，仅完成对象obj的构造与析构\n  return (0);\n}\n```\n```output\nConstructing base object.\nConstructing C object.\nConstructing derived object.\nDestructing derived object.\nDestructing C object.\nDestructing base object.\n\n```\n","tags":["C++"],"categories":["C++","Inheritance and Derivation"]},{"title":"C++ note (7)","url":"//2023/06/07/C-note-7/","content":"# 运算符重载 Ⅱ\n## 注意事项\n### 函数对象\n当定义了 `operator()` 的类的对象调用此操作符时，其表现形式如同普通函数调用一般，故**取名函数对象**，举例：\n```cpp\nclass cmp {\n  public:\n    bool operator () (const int& a, const int& b) {\n      return a < b;\n    }\n};\n```\n```cpp\nint main() {\n  cmp f;\n  cout << f(1,2) << endl;\n  return (0);\n}\n```\n```output\n1\n\n```\n函数对象实际上也是一个对象，所以可以拥有自己的成员变量，从而执行带谓词的函数执行：\n```cpp\n// greater.h\nclass greaterThan {\n  \n  private:\n    int base;\n\n  public:\n    greaterThan(int x) : base(x) {}\n    bool operator () (const int& x) {\n      return x > base;\n    }\n};\n```\n```cpp\n#include \"greater.h\"\nint main() {\n  greaterThan g(10);\n  cout << g(15) << endl;\n  return (0);\n}\n```\n```output\n1\n\n```\n所以，函数对象相比普通的函数有一个非常重要的用途，即 <span style=\"color:orange\">作为谓词函数（Predicate）</span>。\n\n谓词函数通常用来对传进来的参数进行判断，并<span style=\"color:orange\">返回布尔值</span>。标准库中有大量的函数都定义了多个重载版本，其中包含由用户提供谓词函数的，比如：find_if，remove_if，等等。\n\n现在假设我们有一串数字，要从中找出第一个大于10的数字：\n```cpp\n#include \"greater.h\"\nbool greaterThan10(const int& x) {\n  return x > 10;\n}\nint main() {\n  vector<int> a = {5, 10, 15, 20, 25};\n  // find_if return a iterator\n  cout << *find_if(a.begin(), a.end(), greaterThan(10)) << endl;\n  cout << *find_if(a.begin(), a.end(), greaterThan10) << endl;\n  return (0);\n  // 用函数对象，使得代码更具有可读性\n}\n```\n## 友元函数\n### 问题引入\nQ:如何解决外部函数无法访问类的 private 成员？\n```cpp\nclass integer {\n  int x;\n};\n\nistream& operator >> (istream& is, integer& Int) {\n  is >> Int.x; // error: private, unavailable\n  return is;\n}\n\nostream& operator << (ostream& os, const integer& Int) {\n  os << Int.x; // error: private, unavailable\n  return os;\n}\n```\nA:使用友元函数（friend function）\n### 概念\n- `friend return_type function_name(parameter_type_list);`\n\n将正常声明的函数放进类内部，并在前面加上 `friend` 关键字，那么这个函数虽然<span style=\"color:orange\">不属于类</span>，但却可以访问类的私有变量以及私有函数。\n```cpp\nclass integer {\n  int x;\n  friend istream& operator >> (istream& is, integer& Int);\n  friend ostream& operator << (ostream& os, const integer& Int);\n};\n\nistream& operator >> (istream& is, integer& Int) {\n  is >> Int.x; // ok\n  return is;\n}\n\nostream& operator << (ostream& os, const integer& Int) {\n  os << Int.x; // ok\n  return os;\n}\n```\n> 友元函数的声明*可以放在类的私有部分*，也可以放在公有部分，它们是没有区别的，都说明是该类的一个友元函数。\n\n类的成员函数也是一种函数，所以，其他类的成员函数也可以作为友元函数\n```cpp\nclass integer;\n\nstruct cmp {\n  bool operator () (const integer& a, const integer b);\n};\n\nclass integer {\n  private:\n    int x;\n\n  public:\n    integer(int x = 0) : x(x) {}\n    friend bool cmp::operator () (const integer& a, const integer& b); // declaration\n};\n\nbool cmp::operator () (const integer& a, const integer& b) {\n  return a.x < b.x;\n}\n```\n### 友元类\n有时候其他类的成员函数可能会很多，一个一个的声明为友元函数会比较麻烦。\n\n所以我们就可以直接**声明友元类**：\n\n- 一个类 A 可以将另一个类 B 声明为自己的友元，那么类 B 的所有成员函数就都可以访问类 A 对象的私有成员\n- `friend class B;` （在类 A 的内部）\n```cpp\nclass integer;\n\nstruct cmp {\n  bool operator () (const integer& a, const integer b);\n};\n\nclass integer {\n  private:\n    int x;\n\n  public:\n    integer(int x = 0) : x(x) {}\n    friend cmp; // new declaration\n};\n\nbool cmp::operator () (const integer& a, const integer& b) {\n  return a.x < b.x;\n}\n```\n## 操作符重载限定\n### 必须是函数成员\n![](pic1.png)\n## 隐式转换\n### 问题引入\n### 对象隐式转换\n如果对象 T 存在构造函数 T(T1), 则 T1 类型对象（实参）可隐式转为 T 类型对象（形参）\n```cpp\nclass integer {\n  int x;\n\n  public:\n    integer(int x = 0) : x(x) {}\n    friend integer operator + (const integer& lhs, const integer& rhs) {\n      return lhs.x + rhs.x; // 1. int -> integer\n    }\n    friend ostream& operator << (ostream& o, const integer& hs) {\n      o << hs.x;\n      return o;\n    }\n};\n\nint main() {\n  string s; \n  s = \"Hello\"; // 2. const char* -> string\n  cout << s << endl;\n\n  integer i1(3), i2;\n  i2 = 1.1 + i1; // 3. double -> int   int -> integer\n  cout << i2 << endl;\n  return (0);\n}\n```\n### 重载协议-const\n如果重载的函数参数一样，可以通过转换到某个重载函数，编译会如何哪个版本的选择？\n1. 类型直接匹配的优先选择；\n2. const 类型实参匹配 const 版本\n3. 非 const 实参优先匹配非 const 版本。没有则隐式转换为 const 版本匹配\n```cpp\nclass Integer {\n  int x;\n\n  public:\n    integer(int x = 0) : x(x) {}\n    friend ostream& operator << (ostream& o, const Integer& hs) {\n      o << \"const \" << hs.x;\n      return o;\n    } \n    friend ostream& operator << (ostream& o, Integer& hs) {\n      o << \"no_const \" << hs.x ;\n      return o;\n    } \n};\n\nint main() {\n  Integer i1(1);\n  const Integer i2(2);\n  cout << i1 << \",\" << 3 << \",\" << i2 << endl;\n}\n```\n```output\nno_const 1,3,const 2\n\n```\n练习：\n1. 注释去除非 const 版本，编译运行\n2. 注释去除 const 版本，编译\n### nullptr\nC 语言零值常数有很多表示，如 0, NULL, '\\0', C++ 右引入了 nullptr 表示*空值指针字面量*。\n\n下边的例子解释了 nullptr 的必要性\n```cpp\nclass Integer {\n  int x;\n`public:\n    Integer(int x = 0) : x(x) {}\n    friend Integer operator + (const Integer& lhs, Integer rhs){\n      return lhs.x + rhs.x;\n    } \n    friend Integer operator+(const Integer& lhs, Integer* rhs){\n      if (rhs) {\n        return lhs.x + rhs->x + 2000;\n      } else {\n        return lhs.x + 1000;\n      }\n    }\n    friend ostream& operator << (ostream& o, const Integer& hs) {\n      o << hs.x;\n      return o;\n    } \n};\n\nclass Girlfriend {/* ... */};\n\nvoid kissGirlfriend(Girlfriend* gf) {\n  cout << \"pointer\"<<endl;\n}\n\nvoid kissGirlfriend(int gfID) {\n  cout << \"int\"<<endl;\n}\n\nint main() {\n  kissGirlfriend(nullptr);  // 指针类型字面量（viod *）0 \n  kissGirlfriend(0); // 尝试 NULL 取代 0 \n\n  Integer i1(1), i2;\n  i2 = i1 + 0;  // 尝试 1,nullptr,NULL,&i1 取代 0 \n  cout << i2 << endl;\n  return (0);\n}\n```\n> 先进行类型匹配\n> \n> 再进行类型转换\n> \n> 0优先转指针了，不会执行integer类型转换\n> \n> 运算符重载，0必须特殊处理。如采用显式转换（integer）0转指针了，不会执行integer类型转换\n\n### explicit\nC++ 关键字 explicit，用于<span style=\"color:orange\">关闭这种自动类型转化的特性</span>。\n\n即被 explicit 关键字修饰的类构造函数，不能进行自动地隐式类型转换，<span style=\"color:orange\">只能显式地进行类型转换</span>。\n```cpp\nclass Integer;\nstruct cmp {\n  bool operator () (const Integer& a, const Integer& b);\n};\n\nclass Integer {\n  int x;\n\n  public:\n    explicit Integer(cosnt char* s) : x(atoi(s)) {}\n    Integer(int x = 0) : x(x) {}\n    friend cmp;\n};\n\nbool cmp::operator () (const Integer& a, const Integer& b) {\n  return a.x < b.x;\n}\n\nint main() {\n  Integer a(\"3\"), b(\"4\");\n  cmp compare;\n  cout << compare(a,b) << endl;\n  \n  cout << compare(Integer(\"1\"), Integer(\"2\")) << endl; // explicit construction, ok\n  cout << compare((Integer)\"1\", (Integer)\"2\") << endl; // explicit conversion, ok\n\n  cout << compare(\"1\", \"2\") << endl; // error\n  cout << compare(\"a\", \"b\") << endl; // error\n  return (0);\n}\n```\n","tags":["C++"],"categories":["C++","Operator overloading"]},{"title":"Todo list (1)","url":"//2023/06/04/Todo-list-1/","content":"# Todo\n1. 备份hexo\n2. 美化hexo制作的表格\n3. 更换render，让hexo支持TeX\n4. 解决主页面翻页键不显示问题\n","tags":["todo"]},{"title":"C++ note (6)","url":"//2023/06/01/C-note-6/","content":"# 运算符重载 Ⅰ\n## 概念\nC++为了增强代码的可读性引入了<span style=\"color:orange\">运算符重载</span>，运算符重载是具有特殊函数名的函数，也具有*返回值类型，函数名*和*参数列表*。\n\n重载的运算符可以理解为<span style=\"color:orange;\">带有特殊名称的函数</span>，函数名是由关键字 `operator` 和其后要重载的运算符符号构成的。\n\n`opand1 op opand2 -> op(opand1, opand2)`\n\n`A + B -> operator + (A, B) -> add(A, B)`\n\n## 方法\n运算符重载的两种方法：\n1. 类成员函数运算符重载\n   - `return_type class_name::operator op(operand2) {}`\n   - 重载二元运算符时，成员运算符函数只需显式传递一个参数（即二元运算符的右操作数），而左操作数则是该类对象本身，通过 this 指针隐式传递。\n   - 重载一元运算符时，成员运算符函数没有参数，操作数是该类对象本身，通过 this 指针隐式传递\n2. 友元函数运算符重载\n   - `return_type operator op(operand1, operand2) {}`\n\n`A + B -> A.operator + (B)`\n\n`-A -> A.operator - ()`\n\n## 可重载运算符\n\n| |运算符 | 操作符 |\n| :---: | :---: | :---: |\n| 双目  | 算术运算<br/>关系运算符<br/>逻辑运算<br/>位运算 | `+`(add), `-`(minus), `*`(times), `/`(divide), `%`(mod)<br/>`==`, `!=`, `<`(less), `>`(more), `<=`, `>=`<br/>`\\|\\|`, `&&`, `!`<br/> `\\|` , `&`, `~`, `^`, `<<`, `>>` |\n|       |单目运算|                                                            `+`(pos), `-`(neg), `*`(ptr), `&`(addr)                                                            |                         |                  |                    |\n|       |自增自减运算|                                                                          `++`， `--`                                                                          |                         |                  |                    |\n|       | 赋值运算 |                                                          `=`， `+=`， `-=`， `*=`， `/=`， `&=`， `\\|=`， `^=`, `<<=`, `>>=` |                  |                    |\n|       |其他运算 |                                                                     `()`, `->`, `,`, `[]`                                                                     |                         |                  |                    |\n|       |空间申请和释放 |                                                             `new`, `delete`, `new[]`, `delete[]`||||\n\n## 不可重载运算符\n`::`,  `.`,  `.*`(通过成员指针的成员访问),  `?:`,  `sizeof`(`alignof`, `typeid`等),  `#`(预处理符号)\n### 其他*限制*\n- 不能创建新运算符，例如 **、<> 或 &|。\n- 运算符 `&&` 与 `||` 的重载<span style=\"color:orange\">失去短路求值</span>\n- 重载的运算符 `->` 必须要么返回裸指针，要么（按引用或值）返回同样重载了运算符 `->` 的对象。\n- 不可能更改运算符的优先级、结合方向或操作数的数量。\n- 二元运算符中，左操作数为非对象的运算，必须用友元函数\n- (5) 运算符重载不能改变该运算符用于内部类型对象的含义。它只能和用户自定义类型的对象一起使用，或者用于用户自定义类型的对象和内部类型的对象混合使用时\n- `=`, `()`, `[]`, `->` 不能以友元方式重载，只能成员\n- 除了类属关系运算符`.`、成员指针运算符`.*`、作用域运算符`::`、`sizeof`运算符和三目运算符`?:`以外，C++中的所有运算符都可以重载\n## 双目/单目运算符、成员函数重载例子\n```cpp\nclass Integer {\n\n  private:\n    int x;\n\n  public:\n    Integer(int x = 0) : x(x) {}\n    Integer operator + (const Integer& Int) {\n      return Integer(x + Int.x);\n    }\n    Integer operator - (const Integer& Int) {\n      return Integer(x - Int.x);\n    }\n    Integer operator - () {\n      return Integer(-x);\n    }\n    void print() {\n      cout << x << endl;\n    }\n};\n```\n```cpp\nint main() {\n  Integer a = 3, b = 4;\n  a.print();\n  b.print();\n  Integer c = a + b;\n  Integer d = a - b;\n  Integer e = -a;\n  c.print();\n  d.print();\n  e.print();\n  return (0);\n}\n```\n```output\n3\n4\n7\n-1\n-3\n```\n注意：\n1. 左操作数：必须是 *this\n2. 右操作数：类型任意，注意区分 `T`，`const T&`，`T&`，`T&&`，`T*`，`const T*` 的差别\n3. 返回值：可以是任意类型，一般是左操作数类型的临时对象 `T`，或左操作数自身的引用 `T&`\n## 注意事项\n### 重载自增运算符\n重载自增运算符时需注意：\n- 若为**前缀自增**运算符，**直接重载**（以 `++` 举例）：\n  - `return_type class_name::operator ++() {}`\n- 若为**后缀自增**运算符，该函数有一个 `int` 类型的虚拟形参，这个形参在函数的主体中是不会被使用的，这只是一个约定，它告诉编译器递增运算符正在后缀模式下被重载：\n  - `return_type class_name::operator ++(int) {}`\n![](pic1.png)\n```cpp\nclass Integer {\n\n  private:\n    int x;\n\n  public:\n    Integer(int x = 0) : x(x) {}\n    Integer& operator ++ () {\n      cerr << \"prefix is invoked\" << endl;\n      ++x;\n      return *this;\n    }\n    Integer operator ++ (int) {\n      cerr << \"suffix is invoked\" << endl;\n      return Integer(x++);\n    }\n    void print() {\n      cout << x << endl;\n    }\n};\n```\n```cpp\nint main() {\n  Integer a = 3;\n  a.print();\n  Integer b = ++a;\n  a.print();\n  b.print();\n  Integer c = a++;\n  a.print();\n  c.print();\n  return 0;\n}\n```\n```output\n3\nprefix is invoked\n4\n4\nsuffix is invoked\n5\n4\n```\n### 重载赋值运算符\n```cpp\nclass Integer {\n\n  private:\n    int x;\n\n  public:\n    Integer(int x = 0) : x(x) {}\n    Integer& operator = (const Integer& Int) {\n      x = Int.x;\n      cout << \"function is invoked\" << endl;\n      return *this;\n    }\n    void print() {\n      cout << x << endl;\n    }\n};\n```\n```cpp\nint main() {\n  Integer a = 3, b;\n  a.print();\n  b = a;\n  b.print();\n  return (0);\n}\n```\n```output\n3\nfunction is invoked\n3\n```\n![](pic2.png)\n而不重载赋值运算符时会有一个**缺省赋值运算符**，每个成员变量**直接拷贝值**\n```cpp\nclass Integer {\n\n  private:\n    int x;\n\n  public:\n    Integer(int x = 0) : x(x) {}\n    void print() { \n      cout << x << endl;\n    }\n};\n```\n```cpp\nint main() {\n  Integer a = 3, b;\n  a.print();\n  b = a; // default operator '='\n  b.print();\n  return (0);\n}\n```\n```output\n3\n3\n```\n所以当**成员变量包含指针类型**的时候，要**注意浅拷贝和深拷贝的区别**\n```cpp\nclass IntArray {\n\n  private:\n    int *a, n;\n\n  public:\n    IntArray(int n = 1) : n(n) {\n      a = new int[n];\n    }\n    ~IntArray() {\n      delete[] a;\n    }\n    int& operator [] (const int& i) {\n      assert(0 <= i && i < n);\n      return a[i];\n    }\n    void print() {\n      for (int i = 0; i < n; ++i) {\n        cout << a[i] << \" \"; \n      }\n      cout << endl;\n    }\n};\n// 未重载赋值运算符\n```\n```cpp\nint main() {\n  IntArray a(4), b;\n  for (int i = 0; i < 4; ++i) {\n    a[i] = i;\n  }\n  a.print();\n  b = a; // 默认赋值符 '=' 不是不行，但不推荐，有可能内存泄漏\n  b.print();\n  for (int i = 0; i < 4; ++i) {\n    a[i]=-i;\n  }\n  a.print();\n  b.print(); // 与a一致\n  a.~IntArray(); // 直接调用析构，导致多次析构\n  b.print(); // b，a先后析构，造成segmentation fault\n  return 0;\n}\n```\n```output\n0 1 2 3 \n0 1 2 3 \n0 -1 -2 -3 \n0 -1 -2 -3 \n40316064 0 17039696 0 \n\n```\n一种重载赋值运算符的正确写法\n```cpp\nclass IntArray {\n\n  private:\n    int *a, n;\n\n  public:\n    IntArray(int n = 1) : n(n) {\n      a = new int[n];\n    }\n    ~IntArray() {\n      delete[] a;\n    }\n    int& operator [] (const int& i) {\n      assert(0 <= i && i < n);\n      return a[i];\n    }\n    IntArray& operator = (const IntArray& A) {\n      delete[] a;\n      n = A.n;\n      a = new int[n];\n      memcpy(a, A.a, sizeof(int)*n);\n      return *this;\n    }\n    void print() {\n      for (int i = 0; i < n; ++i) {\n        cout << a[i] << \" \";\n      }\n      cout << endl;\n    }\n};\n```\n```cpp\nint main() {\n  IntArray a(4), b;\n  for (int i = 0; i < 4; ++i) {\n    a[i] = i;\n  }\n  a.print();\n  b = a; // deep copy is good\n  b.print();\n  for (int i = 0; i < 4; ++i) {\n    a[i] = -i;\n  }\n  a.print();\n  b.print(); // would be different from a\n  //a.~IntArray();\n  b.print(); // nothing happend\n  return 0;\n}\n```\n```output\n0 1 2 3 \n0 1 2 3 \n0 -1 -2 -3 \n0 1 2 3 \n0 1 2 3 \n\n```\n> 如果是 `string` 对象， `new` 数组会带来巨大对象构造成本。\n> \n> 例如，作业中我们开辟 10000 个 account 数组，不仅每个对象构造成本巨大，而却 Account 通常是没有默认无参构造函数，因为没有账号ID的 account 不合理。\n### 重载移位运算符（类外定义）\n`cin >>` 和 `cout <<` 的用法重载了 `>>` 和 `<<`\n\n同样，可以自行对定义的类做重载\n```cpp\nstruct Integer {\n  int x;\n};\n\nistream& operator >> (istream& istrm, Integer& Int) {\n  istrm >> Int.x;\n  return istrm;\n}\n\nostream& operator << (ostream& ostrm, const Integer& Int) {\n  ostrm << Int.x;\n  return ostrm;\n}\n```\n```cpp\nint main() {\n  Integer x;\n  cin >> x;\n  cout << x << endl;\n  return (0);\n}\n```\n要点：\n1. 使用 `struct` 为了说明<span style=\"color:orange\">位移运算可以作为普通函数重载</span>，而 `=` 运算只能作为成员函数重载\n2. 第一操作数不是 `*this` 的，只能在类外定义\n3. 要返回对象自身的引用\n\n#### 展开讲 **2**\n在C++中，`istream` 和 `ostream` 是标准库中的类，用于读取和写入数据流。这两个类都是抽象类，不能直接实例化，需要使用其派生类进行实例化，例如`iostream`、`ifstream`、`ofstream`等。\n\n由于 `istream` 和 `ostream` 是<span style=\"color:orange\">标准库的类，我们不能在这些类的内部添加自定义的函数</span>。因此，我们只能将重载的输入输出运算符定义为类的**友元函数**或**类的非成员函数**，并在类的**外部**进行定义。\n\n而，如果我们将这些函数定义为类的成员函数，则必须将其定义在类的内部，而不能在类的外部定义。\n\n当我们将重载的输入输出运算符定义为类的友元函数时，我们可以在类的内部声明这些函数，然后在类的外部进行定义。例如：\n```cpp\nclass Integer {\n\npublic:\n  friend istream& operator >> (istream& istrm, Integer& Int);\n  friend ostream& operator << (ostream& ostrm, const Integer& Int);\n\nprivate:\n  int x;\n};\n\nistream& operator >> (istream& istrm, Integer& Int) {\n  istrm >> Int.x;\n  return istrm;\n}\n\nostream& operator << (ostream& ostrm, const Integer& Int) {\n  ostrm << Int.x;\n  return ostrm;\n}\n```\n当我们将重载的输入输出运算符定义为类的非成员函数时，我们不需要将它们声明为类的友元函数，只需在类的外部进行定义。例如：\n```cpp\nclass Integer {\n\npublic:\n  int x;\n};\n\nistream& operator >> (istream& istrm, Integer& Int) {\n  istrm >> Int.x;\n  return istrm;\n}\n\nostream& operator << (ostream& ostrm, const Integer& Int) {\n  ostrm << Int.x;\n  return ostrm;\n}\n```\n无论采用哪种方式，都可以实现对Integer类的输入输出运算符的重载，并且将其定义在类的外部。\n#### 展开讲 **3**\n`istream& operator >> (istream& istrm, Integer& Int)` 和 `ostream& operator << (ostream& ostrm, const Integer& Int)` 函数都返回它们的第一个参数，即输入流和输出流的自身引用。这是因为这些函数通过引用参数修改了流对象的状态，因此<span style=\"color:orange\">返回自身引用可以实现连续的输入/输出操作</span>。\n\n对于输入运算符 `>>` 来说，函数需要将输入流对象的状态修改为已读取输入的值，而对于输出运算符 `<<` 来说，函数需要将输出流对象的状态修改为已写入输出的值。因此，为了实现链式输入输出操作，这些重载函数通常返回它们的第一个参数，即输入输出流对象的引用，以便连续调用。\n\n如果我们不返回自身引用，那么我们就无法通过链式调用连续地对输入流进行操作，例如：\n```cpp\ncin >> x; // 正常调用\ncin >> x >> y; // 无法连续调用，因为第一个输入操作没有返回自身引用\n```\n因此，返回对象的自身引用可以实现链式的输入输出操作，使代码更加简洁、易读。\n","tags":["C++"],"categories":["C++","Operator overloading"]},{"title":"Examples for C++ note (5)","url":"//2023/05/29/Examples-for-C-note-5/","content":"## Example 1\n```cpp\nclass foo {\n\n  public: \n    foo(int i) { \n      cout << \"Constructing.\" << endl;\n      member = i;\n    }\n    foo(const FOO& other) { cout << \"Copy constructing.\" << endl;\n      member = other.member;\n    }     \n    ~foo() { \n      cout << \"Destructing.\" << endl; \n    }\n    int get() {\n      return member;\n    }\n\n  private:\n    int member;\n};\n\nvoid display(foo obj) {\n  cout << obt.get() << endl;\n}\n\nfoo get_foo() {\n  int value;\n  cout << \"Input an integer: \";\n  cin >> value;\n  foo obj(value);\n  return obj;\n}\n```\n```cpp\nint main() {\n  foo obj1(15);\n  foo obj2 = obj1;\n  display(obj2);\n  obj2 = get_foo();\n  display(obj2);\n\n  return (0);\n}\n```\n<span style=\"color:#138DE9;\">返回：</span><a href=\"{% post_path C-note-5 '隐式调用复制构造' %}#隐式调用复制构造\">隐式调用复制构造</a>\n## Example 2\n<span style=\"color:#138DE9;\">返回：</span><a href=\"{% post_path C-note-5 '复制策略：拷贝构造函数自定义' %}#复制策略：拷贝构造函数自定义\">复制策略：拷贝构造函数自定义</a>\n","tags":["C++"],"categories":["C++","ADT and class"]},{"title":"C++ note (5)","url":"//2023/05/28/C-note-5/","content":"# 数据抽象和类 Ⅳ\n## 对象成员初始化\n### *非静态*数据成员初始化方法：\n* 在构造函数的成员 **初始化器列表** 中。（C++11）\n* 通过 **默认成员初始化器** ，它是成员声明中包含的 **花括号 或 等号 初始化器**。（C++11）\n* 构造函数体内进行赋值操作。（**不要构造成员**，除非特别熟悉 `new` 的用法）\n### 为什么需要初始化器列表和默认成员初始化器？\n* 对象初始化分两个阶段：先**按声明顺序初始化**成员、然后执行构造函数函数体；\n* 对于复杂对象成员，如 `std::string name`，必须先构造才能在构造函数中赋值。这会导致构造函数必须先构造一个 `string` 中间变量才能赋值给 `name`；\n* 对于引用类型成员，const 成员需要预初始化；\n* 对象成员**初始化需要参数**。\n\n>为了*提升初始化性能*，`C++` 引入了默认成员初始化器和初始化器列表\n### 语法\n与其他函数不同，构造函数除了有名字，参数列表和函数体之外，还可以有初始化器列表，初始化器列表以冒号开头，后跟一系列以逗号分隔的成员初始化器。\n```cpp\nDate(int y, int m) : year(y), month(m) {}\n```\n### 要点\n#### 必须使用初始化器列表的时候\n\n除了性能问题之外，有些时候初始化器列表是不可或缺的.以下几种情况时必须使用初始化器列表：\n1. **常量成员**，因为常量只能初始化不能赋值，所以必须放在初始化器列表里面\n2. 引用类型，**引用必须在定义的时候初始化**，**并且不能重新赋值**，所以也要使用初始化器\n3. **没有默认构造函数的类类型（class type）**，因为使用初始化器列表*可以不必调用无参构造函数*来初始化，而是直接用其他构造函数初始化\n#### 成员变量声明的顺序\n成员是按照他们*在类中声明的顺序进行初始化的*，而不是按照他们在初始化器列表出现的顺序初始化的\n```cpp\nfoo(int x) : i(x), j(i) {}\n// 先初始化i，后初始化j\n```\n一个好的习惯是，按照成员声明的顺序进行初始化\n#### 示例\n```cpp\n/*member initialization*/\nstruct S {\n\n  int n;\n  // 非静态数据成员\n  int& r = n;\n  // 引用类型的非静态数据成员; =默认构造\n  int a[2] = {1, 2};\n  // 带默认成员初始化器的非静态数据成员（C++11）\n  string s{'H','C'};\n  // 带默认成员初始化器\n\n  struct nestedS  {\n    string s;\n    nestedS(std::string s = \"hello\") : s(s) {};\n  } d5;\n  // 具有嵌套类型的非静态数据成员\n \n  const char bit : 2;\n  // 2 位的位域, const初始化\n  \n  S() : n(7), bit(3) {}\n  // \" : n(7), bit(3)\" 是初始化器列表; \"{}\" 是函数体\n  S(int x) : n{x}, bit(3) {}\n};\n\nint main() {\n  S s;      // 调用 S::S()\n  S s2(10); // 调用 S::S(int)\n}\n```\n#### 练习\n## 对象的内存布局\n### C++内存格局见 {post_link C-note-4}\n\n* date area 存放全局变量，静态数据和常量\n\n* code area 存放所有类成员函数和非成员函数代码\n\n* stack area 存放为运行函数而分配的局部变量、函数参数、返回数据、返回地址等（栈区）\n\n* 余下的空间都被称为 heap area（堆区）\n### 在类的定义时：\n* 类的成员函数被放在 code area\n* 类的*静态成员变量*在 data area\n* 非静态成员变量、虚函数指针、虚基类指针在类的实例内，实例在 stack area 或 data area\n\n类的实例\n\n如果是定义的类变量，则在 stack area\n\n如果是new出来的类指针，则在 heap area，同时引用会保存在 heap\n\n### 注意：\n1. 对象中包含成员函数指针浪费内存\n2. 与 `C` 库 `struct` 不兼容\n\n### `C++` 使用静态联编\n对象方法静态联编：\n\n指在编译阶段，就能直接使用代码段函数地址调用动态对象的方法。该方法仅需要向非静态成员函数传送this指针，即可用静态函数调用实现动态调用效果。\n\n优势：\n1. 对象布局与 `C` 结构内存布局一致，使得内存中对象便于与其他语言程序库兼容\n2. 高效率，高性能\n## 拷贝构造函数\n### 概念\n在定义语句中用同类型的对象初始化另一个对象\n```cpp\n//假定 C 为已定义的类\nC obj1;       //调用 C 的（1）无参构造函数\nC obj1(1,2)    //调用 C 的有参（2）普通构造函数\n//如无(1)(2)则调用默认构造函数\n\n/*调用 C 的（3）拷贝构造函数用对象obj1初始化对象obj2。\n如果有为 C 类明确定义拷贝构造函数，将调用这个拷贝构造函数；\n如果没有为 C 类定义拷贝构造函数，将调用默认拷贝构造函数。*/\n\nC obj2(obja);    //或\nC obj2 = obja ;  //两者等价（注意：不是赋值运算）\n```\n### 语法\n* 用类类型（class type）本身作为参数\n* 该参数传递方式为**按引用传递**，*避免在函数调用过程中生成形参副本*。\n* 该形参声明为 `const`，*以确保在拷贝构造函数中不修改实参的值*\n```cpp\nC::C(const C& obj);\n```\n例如：\n```cpp\ncomplex(const complex& other);\n```\n注：\n1. C::C(C& obj) 不用 const 形式已过时。\n2. C::C(C&& obj) 形式称为移动构造函数（超纲）\n### 要点\n* 形参类型为该类类型本身且参数传递方式为按引用传递\n* 用一个**已存在**的该类对象初始化新创建的对象\n* 每个类都必须有拷贝构造函数：\n  * 用户可根据自己的需要显式定义拷贝构造函数\n  * 若用户未提供，则该类使用由系统提供的缺省拷贝构造函数（可用`= default`），也可用 `= delete` 弃置该函数\n  * 缺省拷贝构造函数**按照初始化顺序**，对对象的各基类和非静态成员进行*完整的逐成员复制*，完成新对象的初始化。即*逐一调用成员的拷贝构造*，如果成员是基础类型，则复制值（赋值）\n### 隐式调用复制构造\n1. 对象作为函数值参\n   \n   将一个对象作为实参，以按值调用方式传递给被调用的形参对象\n   ```cpp\n   // 假定C为已定义的类，obj为 C 类对象\n   void fn(C tmp) {...}\n             /\n            /\n           /\n          /\n         /\n   fn(obj);\n   // 用obj初始化tmp，如果有 C 类明确定义拷贝构造函数，将调用其；如果没有，将调用缺省拷贝构造函数\n   // obj传递给fn函数，创建对象tmp时，调用 C 的拷贝构造函数用对象obj初始化对象tmp，tmp生存期结束时调用析构函数\n2. 对象作为值从函数返回\n   \n   生成一个临时对象，作为函数的返回结果：\n\n   当函数返回某一对象时，系统将自动创建一个临时对象来保存函数的返回值。当创建此临时对象时，调用拷贝构造函数；当函数调用表达式结束后，撤销该临时对象，调用析构函数\n   ```cpp\n   C fn() {\n     C t;\n     ...\n     return t\n   }\n   ```\n   则\n   ```cpp\n   tmp = fn();\n   ```\n   t -> temp_object -> tmp\n   \n  * 编译优化：\n  ```cpp\n  C fn() {\n    C tmp;\n    ...\n    return tmp;\n  }\n  ```\n  实际的gcc/g++会优化使得tmp和new C的地址是一样的\n\n#### 示例：\n<a href=\"{% post_path Examples-for-C-note-5 'Example 1' %}#Example-1\">Example 1</a>\n\n### 复制策略：拷贝构造函数自定义\n> 浅拷贝只复制成员指针的值，而不复制指向的对象实体，导致新旧对象成员指针指向同一块内存。但深拷贝要求成员指针指向的对象也要复制，新对象跟原对象的成员指针不会指向同一块内存，修改新对象不会改到原对象。\n\n1. 对于不含指针成员的类，使用系统提供（编译器合成）的**默认拷贝构造函数**即可\n2. 缺省拷贝构造函数使用浅复制策略，不能满足对含指针数据成员的类需要\n3. 含指针成员的类通常应重写以下内容：\n* *构造函数（及拷贝构造函数）*中**分配内存**，深复制策略\n* *= 操作*重写，完成对象深复制策略\n* *析构函数*中**释放内存**\n\n#### 示例：\n<a href=\"{% post_path Examples-for-C-note-5 'Example 2' %}#Example-2\">Example 2</a>\n","tags":["C++"],"categories":["C++","ADT and class"]},{"title":"How I solve the 'tag page is blank' problem","url":"//2023/05/28/How-I-solve-the-tag-page-is-blank-problem/","content":"# 创建 tags 页面时遇到的问题\n## 正常流程\n1. `$ hexo new page \"tags\"`\n2. 编辑 `index.md` :\n    ```bash\n    title: tag\n    type: tags\n    layout: tags\n    ```\n3. 编辑主题配置文件 `nav`:\n    ```bash\n    nav:\n      Posts: /archives\n      Categories: \n      Tags: /tags         # 新增\n    ```\n## 我的 tags 界面会\n* 依旧显示 `Cannot GET /tags/`\n* 正常打开但内容空白\n# 解决\n1. 对于显示 `Cannot GET /tags/`，检查是否写了 `layout: tag` \n2. 对于内容空白，查阅 `themes/maple/layout/tag.ejs`，发现作者写道：\n   > ---\n   > this page will judge whether current page is 'tag.'\n   >\n   > url:'http://localhost:4000/tag/' return false.\n   >\n   > url:'http://localhost:4000/tags/test/' return true.\n   >\n   > if you enter 'tag' page by click link will show all tags.\n   >\n   > otherwise if you enter 'tags' by click post header link will show the single tag of this post.\n   >\n   > how to add a tag page:\n   > 1. hexo new page \"tag\"\n   > 2. cd source/tag/index.md\n   > 3. add layout pattern like this:\n   > ```yml\n   > title: tag\n   > date: 2019-06-09 09:56:49\n   > tag: tag\n   > layout: tag\n   > ```\n   >  ---\n\n方知要将 `tags` 改作 `tag` \n\n对于 `category` 也是同理\n","tags":["HEXO"]},{"title":"How to use tags plugin","url":"//2023/05/27/How-to-use-tags-plugin/","content":"# 标签插件（Tag Plugins）\n标签插件不应该被包裹在 Markdown 语法中\n\n例如： `[]({% post_path lorem-ipsum %})` 是不被支持的。\n\n```markdown\n![name](position/pic_name.type)\n```\n```web\n// on web\n\"pic\"\npic_name\n```\n> hexo的处理方式：\n## 引用块（block quote）/引用（quote）\n在文章中插入引言，可包含作者、来源和标题。\n```hexo\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n## 引用文章\n引用其他文章的链接。\n```markdown\n{% post_path filename %}\n{% post_link filename [title] [escape] %}\n```\n在使用此标签时可以忽略文章文件所在的路径或者文章的永久链接信息、如语言、日期。\n\n例如，在文章中使用 `{% post_link how-to-bake-a-cake %}` 时，只需有一个名为 how-to-bake-a-cake.md 的文章文件即可。即使这个文件位于站点文件夹的 source/posts/2015-02-my-family-holiday 目录下、或者文章的永久链接是 2018/en/how-to-bake-a-cake，都没有影响。\n\n默认链接文字是文章的标题，你也可以自定义要显示的文本。\n\n默认对文章的标题和自定义标题里的特殊字符进行转义。可以使用escape选项，禁止对特殊字符进行转义。\n## 嵌入图片\n自 hexo-renderer-marked 3.1.0 以后可以启用自动路径解析\n\n在 config.yml 内：\n```yml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n启用后，资源图片将会被自动解析为其对应文章的路径\n\n例如：\n\nimage.jpg 位置为 /2020/01/02/foo/image.jpg ，这表示它是 /2020/01/02/foo/ 文章的一张资源图片， `![](image.jpg)` 将会被解析为 \n\n`<img src=\"/2020/01/02/foo/image.jpg\">`\n\n参见：https://hexo.io/zh-cn/docs/asset-folders\n\n### 默认（无选项）\n```md\n{% asset_img foo.jpg %}\n```\n```md\n<img src=\"/2020/01/02/hello/foo.jpg\">\n```\n### 自定义 class 属性\n```md\n{% asset_img post-image foo.jpg %}\n```\n```md\n<img src=\"/2020/01/02/hello/foo.jpg\" class=\"post-image\">\n```\n### 展示尺寸\n```md\n{% asset_img foo.jpg 500 400 %}\n```\n```md\n<img src=\"/2020/01/02/hello/foo.jpg\" width=\"500\" height=\"400\">\n```\n### title 和 alt 属性\n```md\n{% asset_img logo.svg \"lorem ipsum'dolor'\" %}\n```\n```md\n<img src=\"/2020/01/02/hello/foo.jpg\" title=\"lorem ipsum\" alt=\"dolor\">\n```\n","tags":["HEXO"]},{"title":"C++ note (4)","url":"//2023/05/27/C-note-4/","content":"# 数据抽象和类 Ⅲ\n## 动态内存和类\n### `C/C++` 内存空间分布\n- 内存分区\n\n  ![memory](mem.jpg)\n\n1. `Text`--只读、共享，操作系统管理\n\n   * 是对象文件或内存中程序的一部分，其中包含可执行指令（函数实现，库实现，字符串等资源）。文本段在堆栈的下面，是防止堆栈溢出覆盖它。\n\n   * 通常代码段是共享的，对于经常执行的程序，只有一个副本需要存储在内存中；代码段是**只读**的，以防止程序以外修改指令。\n2. `Initialized data`\n\n   * 通常称为*数据段*，是程序的虚拟地址空间的一部分，它包含程序员初始化的**全局变量**和**静态变量**以及**常量**，可以进一步划分为*只读区域*和*读写区域*。\n3. `Unintialized data`--内核初始化为`0`\n\n   * 通常称为 `bss` 段\n4. `Heap`--程序员管理\n\n   * 堆是**动态内存分配**通常发生的部分（动态变量（对象））\n\n   * 内存分配由低到高，分配方式类似于数据结构的链表。堆区域从`BSS`段的末尾开始，并从那里逐渐增加到更大的地址。\n\n   * 堆是由***程序员自己分配***的，或程序结束后由操作系统自动回收。堆区域由所有共享库和进程中动态加载的模块共享。（`malloc`和`new`从堆区分配内存）\n5. `Stack`--编译器分配管理\n   * 栈是存放**自动变量**，以及**函数调用时保存的信息**的部分（自动变量（对象）、函数参数）\n\n   * 每当进行函数调用时，函数的实参和返回地址以及调用者的上下文环境会被存放在栈中；栈区由编译器自动分配，从高地址向低地址扩展。\n\n   * 在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的`C`编译器中，参数是由右往左入栈的，然后是函数中的局部变量。***静态变量是不入栈的***。当本次函数调用结束后，**局部变量先出栈，然后是参数**，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。\n    ```cpp\n    char *s1 = \"Literal\";  // 文字在代码区，仅分配了字符指针\n    // s1[0] = 'I';        // Segmentation fault \n    ```\n    ```cpp\n    char s2[] = \"Initial Literal\"; // 分配数组空间\n    ```\n    ```cpp\n    ptr_type* ptr_name = &((ptr_type){2,3}); // 分配结构空间及指针\n    ```\n### `堆 栈` 的性能区别\n* 写入方面：**入栈**比在堆上分配内存要**快**，因为入栈时操作系统**无需分配新的空间**，只需要将新数据放入栈顶即可。相比之下，在堆上分配内存则需要更多的工作，这是因为操作系统必须首先找到一块足够存放数据的内存空间，接着做一些记录为下一次分配做准备。\n\n* 读取方面：得益于 CPU 高速缓存，使得处理器可以减少对内存的访问，高速缓存和内存的访问速度差异在 10 倍以上！栈数据往往可以直接存储在 CPU 高速缓存中，而堆数据只能存储在内存中。访问堆上的数据比访问栈上的数据慢，因为必须先访问栈再通过栈上的指针来访问内存。\n\n因此，处理器处理和分配在栈上数据会比在堆上的数据更加高效。\n### 内存分区的意义\n不同区域存放的数据，赋予不同的生命周期，给编程更大的灵活性。\n***\n## `C` 动态变量（对象）管理\n### 正确使用堆空间\n- 必须使用 `#include <stdlib.h>`\n- `void* malloc(size_t) // 申请空间`\n- `void free(void*) // 释放空间`\n- 申请的空间必须释放，否则会导致*内存泄漏*\n- `free` 后*再使用或释放指针*，行为不可预测。\n```cpp\ntypedef struct { int x; int y; } Point;\nint main(void) {\n  // 分配变量或一维可变数组\n  Point* p1 = malloc(sizeof(Point) * 10);\n  // 分配二维数组(n,m是常数)\n  point (*p2)[2][3] = malloc(sizeof(Point) * 6);\n  // 分配数组的数组\n  int n = 2;\n  int m = 3;\n  Point **p3 = malloc(sizeof(Point *) * n);\n  for (size_t i = 0; i < n; i++) {\n    p3[i] = malloc(sizeof(Point) * m);\n  }\n  // do somesthing\n  free(p1);\n  free(p2);\n  // 必须先释放行数组\n  for (size_t i = 0; i < n; i++) {\n  free(p3[i]);\n  }\n  free(p3);\n  return (0);\n}\n```\n## `new` 和 `delete` 、动态创建变量/数组、内存泄漏、 `= default`\n{% post_link C-note %}\n","tags":["C++"],"categories":["C++","ADT and class"]},{"title":"C++ note (3)","url":"//2023/05/27/C-note-3/","content":"# 数据抽象和类 Ⅱ\n## `C++` 新增\n### 新类型：`bool`\n`C` ：\n* 没有 bool 类型\n```C\n#define true = 1\n#define false = 0\n```\n* C99 定义了 `_Bool` 类型，并通过 `stdbool.h` 实现与 `C++` 兼容\n\n`C++`：\n* 定义了三个关键字：`bool`，`true`，`false`\n* 当显式（例 (bool)7）或隐式（例 bool b = 7；）转为 `bool` 类型时\n  * `0` 值转为 `false`\n  * 非 `0` 值转为 `true`\n```cpp\ncout << true //输出 1\ncout << false //输出 0\n```\n### 形参：`void`\n`C`：\n* fn(); 没有声明形参表示函数的形参不确定\n* 没有参数，则必须显式声明 fn(void);\n\n`C++`：\n* fn(); **等价于** fn(void);\n* 使用 `…` 表示可变参数\n```cpp\nint printx(const char* fmt, ...);\n// 能以一个或多个实参调用：\n\nprintx(\"hello world\");\nprintx(\"a = %d b = %d\", a, b);\n```\n## 新特性\n### 函数重载\n背景：\n* 在开发中，需要的函数功能类似，但参数数量或类型不同\n`C` 的解决：\n* 必须申明两个函数（不重名）\n`C++` 的解决：\n* 声明同名函数，但参数类型不同：\n```cpp\nvoid swap(int& a, int& b);\n\nvoid swap(double& a, double& b);\n```\n### `auto` 用于函数重载\n```cpp\nvoid swap(int& a, int& b) {\n  auto temp = a;\n  a = b;\n  b = temp;\n}\n\nvoid swap(double& a, double& b) {\n  auto temp = a;\n  a = b;\n  b = temp;\n}\n\nint main(void) {\n  int i = 0;\n  int j = 1;\n  double p =0.1;\n  double q = 1.1;\n  swap(i, j);\n  swap(p, q);\n}\n```\n让编译推导决定使用哪个函数\n\n事实上，编译器会将函数名、参数数量、参数类型编译为唯一的内部函数名\n* swap_int_int\n* swap_double_double\n\n是不同的函数签名\n### 默认实参\n`C`：\n* **不支持**函数默认参数和值\n\n`C++`：\n* 默认参数只能定义在参数**右边**\n* 一个声明和实现可匹配多个函数\n  * `fn()` `fn(int)` `fun(int, float)` `fn(int, float, char)`\n```cpp\nvoid fn(int n = 1, float b = 1.2, char c = '@'); //实现\nvoid fn(int n, float b, char c){\n    cout << n << \", \" << b << \", \" << c << endl;\n}\nint main(){\n    fn();             //func(1,1.2,'@')\n    fn(10);           //func(10,1.2,'@')\n    fn(20, 9.8);      //func(20,9.8,'@')\n    fn(30, 3.5, '#'); //func(30,3.5,'#')\n    return (0);\n}\n```\n### 字符串类型：`string`\n`C`：\n* C 字符串是 `char*` 类型，是以 `'\\0'` 字符结束的字符数组。\n* 在 `C++` 中处理 `C` 字符串，使用 `#include <cstring>`\n\n`C++`：\n* `string` 是类\n* 作为区别，用 `cstring` 称 `C` 字符数组\n```cpp\n  string s1;   // 默认构造\n  string s2 = \"c plus plus\"; // 用cstring构造\n  string s3 = s2; // 用同类对象构造\n  string s4 (5, 's'); // 用int,char作为参数构造\n```\n## 访问控制\n### 公有成员\n* 公有成员在客户端可以任意访问。\n\n* 公有数据成员不需要通过公有函数成员访问，其优点是使用方便，缺点是*可能会破坏封装的逻辑一致性*。\n### 私有成员\n* 私有成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有*类*和*友元函数*可以访问私有成员。\n\n* 默认情况下，class的所有成员都是私有的。\n\n* 实际操作中，一般会在私有区域定义数据，在公有区域定义相关的函数，以便*在类的外部也可以调用这些函数*，保持对象内部状态一致\n## 构造/析构\n### 无参构造函数\n* 类的构造函数是类的一种特殊的成员函数，每次创建类的新对象时执行它完成初始化等逻辑。\n\n* 构造函数的*名称与类的名称是完全相同*的，并且不会返回任何类型，也不会返回 `void`。\n\n* 如果用户没有自定义构造函数，则编译会*自动生成一个默认构造函数*\n\n* `C++11` 以后建议申明时写含参形式\n```cpp\nclass date {\n  private:\n    int year;\n    int month;\n\n  public:\n    date(int = 2023, int = 1);\n};\n\ndate::date(int y, int m) {\n  year  = y;\n  month = m;\n}\n```\n### 含参构造函数\n* 构造函数也可以带有参数。这样在创建对象时就可使用参数构造对象。\n\n* 用户一旦定义了构造函数，编译器就不再自动添加默认构造函数。这时调用无参构造函数会报错\n\n* 构造函数也能使用默认实参。这样可以减少构造函数重载的数量。\n### 析构函数\n* 类的析构函数是类的一种特殊的成员函数，它会在对象*被释放前执行*。\n\n* 析构函数的名称与类的名称是相同的，只是在前面加 `~` 作为前缀，**不会返回任何值**，**也不能带有参数**。\n\n* 析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。\n\n* 析构函数**不能直接调用**\n## `this` 指针\n### 注意点\n* 在 `C++` 中，每一个对象都能通过 `this` 指针来访问自己的地址。`this` 指针是所有成员函数的隐含参数。因此，在成员函数内部，它可以用来指向调用对象。\n* **当成员函数参数与成员数据重名时，必须使用 `this` 访问成员数据。**\n* 只有**动态**成员函数才有 this 指针。\n* 友元函数没有 `this` 指针，因为*友元不是类的成员*。\n* `static` 成员不能使用 `this`，应使用 `::`。\n* `->` 是指针取成员运算\n### 示例\n```cpp\nclass box { \n  public: \n  // 构造函数定义 \n    Box(double l = 2.0, double w = 2.0, double h = 2.0) { \n      cout << \"Constructor called.\" << endl; \n      length = l; \n      width  = w; \n      height = h; \n    } \n    double volume() { \n      return length * width * height; \n    } \n    int compare(Box box) { \n      return this->Volume() > box.Volume(); \n    } \n  \n  private: \n    double length;\n    double width;\n    double height;\n};\n```\n```cpp\nint main(void) { \n  Box box1(3.3, 1.2, 1.5);  // Declare box1 \n  Box box2(8.5, 6.0, 2.0);  // Declare box2 \n  if(box1.compare(box2)) { \n    cout << \"box2 is smaller than box1\" << endl; \n  } else { \n    cout << \"box2 is equal to or larger than box1\" << endl; \n  } \n  return (0); \n}\n```\nOutput:\n```cpp\nConstructor called. \nConstructor called. \nBox2 is equal to or larger than Box1 \n```\n","tags":["C++"],"categories":["C++","ADT and class"]},{"title":"C++ note (2)","url":"//2023/05/10/C-note-2/","content":"# 数据抽象和类 Ⅰ\n## 基本概念\n### 抽象\nData Abstraction:只关心该数据“是什么”“如何使用”，而不关心其如何运作。\nControl Abstraction:只关心该行为能实现什么，而不关心其具体实现方法。\n### 抽象数据类型\n在程序中，称被抽象的数据，为*抽象数据类型*(Abstract Data Type, ADT)\n\n一种ADT应具有：\n1. 说明部分：描述数据值的特征和作用于这些数据之上的操作，用户仅需明白其说明，无需知晓内部实现。\n2. 实现部分。\n#### 抽象数据类型转化\n把`DATE`设计为一种数据类型。\n* 内部包含年月日等数据以及在这些数据上可进行的操作。\n* 用户利用`DATE`就可以定义多个变量。\n* 用户可调用每个变量中公开的操作，但无法直接访问每个变量中被隐藏的内部数据。\n* 用户也无需关心变量中各操作的具体实现。\n* 于是`DATE`就是一种封装好的数据类型。这就达到了信息隐藏和封装的目的。\n## 结构体 类 对象\n### `C` 中的结构体\n`C` 数组允许定义可存储相同类型数据项的变量，结构是 `C` 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。\n结构用于表示一条记录，我们继续以上面的日期为例，我们可能会关心：\n* Year\n* Month\n* Day\n\n但C语言中的 `struct` 只能包含变量，\n不能包括实现ADT当中操作的函数\n```C\nstruct Date {\n  int year;\n  int month;\n  int date;\n} date;\n\nvoid set (int, int, int);\nint getYear();\nint getMonth();\nint getDay();\nvoid print();\nvoid increment();\nvoid decrement();\n```\n### `C++` 对象&类\n新增*面向对象编程*\n```cpp\nclass classname {\n  Access specifiers:\n    Date members/variables;//变量\n    Member fn() {}//方法\n};//分号结束一个类\n```\n#### 类的示例\n```cpp\nclass Date {\n\n  private:\n    int year;\n    int month;\n    int day;\n\n  public:\n    void set(int, int, int);\n    int flag;\n    int getYear() const;\n    int getMonth() const;\n    int getDay() const;\n    void print() const;\n    void increment();\n    void decrement();\n};\n```\n在`{}`中列出类的成员。类的成员包括：\n\n* **数据成员**：一般说来，数据成员是需要隐藏的对象；即外部的程序是不能直接访问这些数据的，应该通过函数成员来访问这些数据。所以一般情况下，数据成员通过关键字 `private` 声明为私有成员（private member）。\n* **函数成员**：通过关键字 `public` 声明为公有成员（public member）。外部程序可以访问共有成员，但无法访问私有成员。\n* \n对于类的使用者（用户代码），只需要获得`DATE.h`，即可调用类对象的公有函数访问其内部的数据成员。使用者无法直接访问私有成员，无需知晓公有函数的内部实现。\n#### 结构体 v.s. 类\n`C` 的 `struct` 只能包含变量，而 `C++` 的 `class` 还可以包含函数。`set()` 是用来处理成员变量的函数，在 `C` 中，我们将它放在了 `struct Date` 外部，和成员变量是分离的；而在 `C++` 中，我们将它放在了 `class Date` 内部，使它和成员变量聚集在一起，看起来更像一个整体。\n#### 对象\n通过结构体定义出来的变量传统上叫变量，而通过类定义出来的变量有了新的名称，叫做*对象*（Object）。\n```cpp\nDate date;\n```\n### 成员函数\n类的*成员函数*指，把定义和原型写在类定义内部的函数，就像类定义中的变量一样。\n\n类成员函数是类的一个成员，它可以操作类的任意对象，可以访问对象中的所有成员。\n\n成员函数可以定义在类定义内部，或者单独使用*范围解析运算符* `::` 来定义。在类定义中定义的成员函数把函数声明为内联的，即便没有使用 inline 标识符。\n```cpp\nclass Date {\n\n  public:\n    void set(int y, int m, int d) {\n      year = y;\n      month = m;\n      day = d;\n    }\n......\n};\n```\n```cpp\nclass Date {\n\n  public:\n    void set(int, int, int);\n......\n};\n\nvoid Date::set(int y, int m, int d) {\n  year = y;\n  month = m;\n  day = d;\n}\n```\n#### 预处理命令\n在 DATE.cpp 文件开头需要加入预处理命令\n\n`#include \"DATE.hpp\"`\n\n这是因为在 DATE.cpp 中要用到用户自定义的标识符 `DATE` ，而它的定义在 DATE.hpp 中。\n\n在 DATE.hpp 中，各函数原型是在 `{}` 中的。根据标识符的作用域规则，它们的作用范围仅在类定义中，而不包括 DATE.cpp 。因此在 DATE.cpp 中需要利用作用域解释运算符 `::` 来指明这里的函数是类 `DATE` 里的成员函数。\n\nDATE.cpp 中有时还包括 `DATE` 内部要使用到的函数，例如daysInMonth。\n \n * 这种函数并非对外公开供用户使用，因此可以将其声明为私有成员。\n \n * 若在该函数中没有涉及该类的数据成员，则无需将它们声明为类的成员。\n\n调用成员函数和成员变量是在对象上使用点运算符（.），这样它就能操作与该对象相关的数据\n```cpp\ndate.flag = 1;\ndate.set(2022,1,30);\n```\n#### 类的静态成员\n静态（static）成员是**类的组成部分但不是任何对象的组成部分**\n* 通过在成员声明前加上保留字 `static` 将成员设为static（\n  * 在数据成员的类型前加保留字 `static` 声明静态数据成员；\n  * 在成员函数的返回类型前加保留字 `static` 声明静态成员函数）\n* static成员遵循正常的公有/私有访问规则。\n* `C++` 程序中，如果访问控制允许的话，可在类作用域外直接（不通过对象）访问静态成员（需加上类名和 `::` ）\n* 静态数据成员具有静态生存期，是类的所有对象共享的存储空间，是整个类的所有对象的属性，而不是某个对象的属性。\n* 与非静态数据成员不同，静态数据成员不是通过构造函数进行初始化，而是必须在类定义体的外部再定义一次，且恰好一次，通常是在类的实现文件中再声明一次，而且此时不能再用 `static` 修饰。\n* 静态成员函数不属于任何对象 \n* 静态成员函数没有 `this` 指针\n* 静态成员函数不能直接访问类的非静态数据成员，只能直接访问类的静态数据成员\n```cpp\n//date.hpp\nclass Date {\n\n  private:\n    static int count;\n    ...\n\n  public:\n    static void getCount();\n    ...\n};\n```\n```cpp\n//date.cpp\n\nint Date::count = 0;\n//必须在类外定义体的外部再定义一次\n\nvoid Date::getCount() {\n  return count;\n}\n```\n","tags":["C++"],"categories":["C++","ADT and class"]},{"title":"C++ note (1)","url":"//2023/05/10/C-note/","content":"# `new` 和 `delete` 、动态创建变量/数组、内存泄漏、 `= default`\n## `new` 和 `delete` 关键字\n### `new` 总结\n1. `ptr_type* ptr_name = new ptr_type; // 动态创建一个对象`\n2. `ptr_type* ptr_name = new ptr_name;（初始化参数） ; // 动态创建一个对象，可不初始化`\n3. `ptr_type* ptr_name = new ptr_type[arr_length] {Init_list}; // 用于动态分配数组，可没有初始化列表（string 类型就一定要有）`\n\n* 类型可为基本类型，也可为类类型(`class type`)。\n  * 若为类类型，则初始化参数相当于将实际参数传递给该类的构造函数\n* `new` 运算返回一个该类型指针（不是 **`void*`**），指向分配到的内存空间\n* 若内存分配失败，**抛出异常结束程序，而不是返回 `NULL`**\n\n### `delete` 总结：\n1. `delete 变量名;` //基本用法\n2. `delete []变量名;` //用于释放数组\n\n* 如果动态分配了一个数组，但是却用`delete p`的方式释放，没有用`[]`，则\n  * 编译时没有问题，运行时也一般不会发生错误，\n  * 但实际上会导致动态分配的数组没有被完全释放。\n* `delete` 释放的是指针所指对象占据的内存。\n  * `delete` 对象指针，会调用该对象的析构函数。（`[]` 将令其中所有元素都调用各自析构函数）\n  * 用delete释放空间后，指针的值仍是原来指向的地址，但指针已无效（重复释放将出错，即非法指针访问）。\n\n* `delete` 本身会自动检查对象是否为空。如果为空,就不做操作,因此 `delete` 空指针**不需要**特判。\n\n* 为防止重复删除出错，最好删除后就把指针赋为空。\n## 动态创建变量/数组\n### 动态创建一个整型变量\n```c++\nint *p = new int;\ncin >> *p;\ndelete p;\n```\n### 动态创建一个整型数组\n```c++\nint *p;\np = new int[length] {1, 2, 3};\n// 若没有初始化列表，则不确定值；若初始化列表长度不够，则自动补齐`0`\nfor (int i = 0; i < length; i++) {\n  cout << p[i] << \" \";\n}\ndelete [] p;\n```\n### 动态创建一个 `string` 数组\n```c++\nint n = 3;\nstring *p = new string[n] {\n  string(5, 'a'), string(4, 'b'), string(3, 'c')\n};\n// 由于将决定分配多少长度，`string`创建时必须初始化\np[1][2] = 'f';\n// 初始化后可以更改\nfor (int i = 0; i < n; i++) {\n  cout << p[i] << endl;\n}\ndelete [] p;\n```\n### 动态创建一个二维整型数组\n```c++\nint row;\nint col;\ncin >> row >> col;\nint **a;\na = new int *[row];\nfor (int i = 0; i < row; i++) {\n  a[i] = new int [col];\n}\nfor (int i = 0; i < row; i++) {\n  for (int j = 0; j < col; j++) {\n    cin >> a[row][col];\n  }\n}\nfor (int i = 0; i < row; i++) {\n  delete [] a[i];\n}\ndelete [] a;\n```\n## 内存泄漏\n是指 `new` 的指针丢失导致占用内存无法释放\n1. 指针赋值时\n   ```c++\n   int *p = new int(7);\n   p = nullptr;\n   // 内存泄漏\n   ```\n2. 指针离开作用域时\n   ```c++\n   void fn() {\n    int *p = new int(7);\n   }\n   // 内存泄露\n   ```\n3. 异常导致程序或函数终止\n   ```c++\n   void fn() {\n    int *p = new int(7);\n    g();\n    delete p;\n   }\n   // 若 g() 抛出异常则内存泄漏\n   ```\n## 显式默认化函数定义 `= default`\n**用于恢复函数的默认定义**\n当我们声明有参构造函数时，编译器就不会创建默认构造函数。为了使编译器创建\n该默认构造函数，可以在函数声明后指定 `= default`\n* 若以 `= default` 声明，则该函数不能写实现\n* 特殊成员函数包括：\n  * 默认构造函数\n  * 析构函数\n  * 复制构造函数等\n\n例如：（有参时用前面的，无参时用默认，这时不能写A（）的实现）\n```c++\npublic:\n  A(int x) {\n    cout << \"constructed\";\n  }\n  A() = default;\n```\n","tags":["C++"],"categories":["C++","ADT and class"]},{"title":"How to start a new post","url":"//2023/05/04/How-to-start-a-new-post/","content":"# 发布文章\n## 发布在首页\n进入 HEXO root dirction ，右键打开 GIT Bash Here\n创建 new post ：\n```bash\nhexo n \"NAME\"    # n: name\n```\n会在 `source/_pots` 文件夹中生成 NAME.md 以及一个名为 NAME.md 的文件夹，可以在该文件夹中放入需要使用到的图片。\n\n图片插入方法可见：{% post_link How-to-use-tags-plugin %}\n## 仅发布文章\n```bash\nhexo n page \"NAME\"\n```\n* 会在 `source` 文件夹中生成 `NAME`\n* 页面不会出现在首页文章列表和归档中，也不支持添加 `categories` 和 `tags` 。\n\n# 渲染并部署\n运行以下代码来将 post 渲染并部署到 Github Pages 上：\n```bash\nhexo g    # 生成页面  g: generate\nhexo d    # 部署发布  d: deploy\n```\n* 若修改并部署后没有效果，使用 `hexo clean` 清理缓存后重新部署。\n\n```bash\nhexo clean\n```\n清除缓存文件 `db.json` 和已生成的静态文件 `public`.\n# 预览\n运行 `hexo g` 前可以先运行以下代码来获得网页预览效果：\n```bash\nhexo s    # 启动本地服务器，用于预览主题  s: sever\n```\n* 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可\n* 对 source 下的 _config.yml 的修改，需要重启本地服务器后才能预览效果\n# 草稿\n相当于私密 post \n```bash\nhexo new draft \"NAME\"\n```\n会在 `source/_drafts` 目录下生成一个 NAME.md 文件，但不被显示在页面上，也访问不到其链接。\n\n如果想把某一篇文章移除显示，可以把它移动到 `_drafts` 目录中。\n\n* 运行以下代码来把草稿变成 post ：\n```bash\nhexo publish [layout] NAME\n```\n* 更改配置文件以强行预览草稿：\n```bash\nrender_drafts: true\n```\n* 或用以下方式打开服务器：\n```bash\nhexo s --drafts\n```\n# 相关说明\n* 以上命令使用基于 Hexo 6.3.0\n* 更多命令用法请查询 https://hexo.io/zh-cn/docs/commands.html\n","tags":["HEXO"]},{"title":"Linked List","url":"//2023/04/29/Linked-List/","content":"# 链表 Linked list\n## 引入\n链表是一种用于存储数据的数据结构，通过如链条一般的指针来连接元素。它的特点是插入与删除数据十分方便，但寻找与读取数据的表现欠佳。\n***\n## 与数组的区别\n链表和数组都可用于存储数据。与链表不同，数组将所有元素按次序依次存储。不同的存储结构令它们有了不同的优势：\n\n链表因其链状的结构，能方便地**删除**、**插入**数据，操作次数是 $O(1)$。但也因为这样，**寻找**、**读取**数据的效率不如数组高，在随机访问数据中的操作次数是 $O(n)$。\n\n数组可以方便地寻找并读取数据，在随机访问中操作次数是 $O(1)$。但删除、插入的操作次数是 $O(n)$ 次。\n***\n## 程序包含头文件\n```c++\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n```\n***\n## 创建一个链表\n> ### <center>Tip\n> ***\n>构建链表时，使用指针的部分比较抽象，光靠文字描述和代码可能难以理解，建议配合作图来理解。\n### 单向链表\n单向链表中包含**数据域**和**指针域**，其中数据域用于*存放数据*，指针域用来*连接当前结点和下一节点*。\n> ***\n> #### <center>实现\n> ***\n>\n>  `C`\n>  ```c\n>  typedef struct Node_t\n>  {\n>    struct Node_t* next;\n>    int key;\n>  } Node;\n>  ```\n>  ***\n>  `C++`\n>  ```c++\n>  struct Node\n>  {\n>    int value;\n>    Node* next;\n>  };\n>  ```\n- 图示\n\n  ![](list.svg)\n### 双向链表\n双向链表中同样有数据域和指针域。不同之处在于，指针域有左、右（或上一个、下一个）之分，用来连接上一个结点、当前结点、下一个结点。\n- 实现\n  ```c++\n  struct\n  ```\n- 图示\n\n  ![](double-list.svg)\n***\n## 向链表写入数据\n### 单向列表\n- 流程\n  1. 初始化待插入的数据 `node`；\n  1. 将 `node` 的 `next` 指针指向 `p` 的下一个结点；\n  1. 将 `p` 的 `next` 指针指向 `node`。\n- 图示\n  1. ![](list-insert-1.svg)\n  2. ![](list-insert-2.svg)\n  3. ![](list-insert-3.svg)\n> ***\n> #### <center>实现\n> ***\n>  ```c++\n>  void insertNode (int temp, Node* p)\n>  {\n>    Node* node = new Node;\n>    node->value = temp;\n>    node->next = p->next;\n>    p->next = node;\n>  }\n>  ```\n### 单向循环链表\n将链表的头尾连接起来，链表就变成了循环链表。由于链表首尾相连，在插入数据时需要判断原链表是否为空：为空则自身循环，不为空则正常插入数据。\n- 流程\n  1. 初始化待插入的数据 `node`；\n  2. 判断给定链表 `p` 是否为空；\n  3. 若为空，则将 `node` 的 `next` 指针和 `p` 都指向自己；\n  4. 否则，将 `node` 的 `next` 指针指向 `p` 的下一个结点；\n  5. 将 `p` 的 `next` 指针指向 `node`。\n- 图示\n  1. ![](list-insert-cyclic-1.svg)\n  2. ![](list-insert-cyclic-2.svg)\n  3. ![](list-insert-cyclic-3.svg)\n> ***\n> #### <center>实现\n> ***\n>  ```c++\n>  void insertNode (int temp, Node* p)\n>  {\n>    Node* node = new Node;\n>    node->value = temp;\n>    node->next = nullptr;\n>    if (p == nullptr){\n>      p = node;\n>      node->next = node;\n>    } else {\n>      node->next = p->next;\n>      p->next = node;\n>    }\n>  }\n>  ```\n***\n## 从链表中删除数据\n### 单向（循环）链表\n设待删除结点为 `p`，从链表中删除它时，将 `p` 的下一个结点 `p->next` 的值覆盖给 `p` 即可，与此同时更新 `p` 的下下个结点。\n- 流程\n  1. 将 `p` 下一个结点的值赋给 `p`，以抹掉 `p->value`；\n  2. 新建一个临时结点 `t` 存放 `p->next` 的地址；\n  3. 将 `p` 的 `next` 指针指向 `p` 的下下个结点，以抹掉 `p->next`；\n  4. 删除 `t`。此时虽然原结点 `p` 的地址还在使用，删除的是原结点 `p->next` 的地址，但 `p` 的数据被 `p->next` 覆盖，`p` 名存实亡。\n- 图示\n  1. ![](list-delete-1.svg)\n  2. ![](list-delete-2.svg)\n  3. ![](list-delete-3.svg)\n> ***\n> #### <center>实现\n> ***\n>  ```c++\n>  void deleteNode (Node* p)\n>  {\n>    p->value = p->next->value;\n>    Node *t = p->next;\n>    p->next = p->next->next;\n>    delete t;\n>  }\n>  ```\n","tags":["Data Structure"],"categories":["Data Structure","Linked List"]}]